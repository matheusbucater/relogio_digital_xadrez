
relogio_digital_xadrez.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000281c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080029b4  080029b4  000039b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029d8  080029d8  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  080029d8  080029d8  000039d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080029e0  080029e0  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029e0  080029e0  000039e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029e4  080029e4  000039e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080029e8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  080029f4  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  080029f4  000040fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a376  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f65  00000000  00000000  0000e3b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  00010318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000086d  00000000  00000000  00010e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015be0  00000000  00000000  000116a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c48d  00000000  00000000  00027285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008833b  00000000  00000000  00033712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bba4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ca0  00000000  00000000  000bba90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000be730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800299c 	.word	0x0800299c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	0800299c 	.word	0x0800299c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <tim_callback>:
#include "button.h"

player_t player1, player2;
game_t game;

void tim_callback(timer_id tim_id) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]
	switch (tim_id) {
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d103      	bne.n	80004e0 <tim_callback+0x18>
		case TIM_TICK:
			game_update(&game);
 80004d8:	4804      	ldr	r0, [pc, #16]	@ (80004ec <tim_callback+0x24>)
 80004da:	f000 f992 	bl	8000802 <game_update>
			break;
 80004de:	e000      	b.n	80004e2 <tim_callback+0x1a>
		default:
			break;
 80004e0:	bf00      	nop
	}
}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	20000058 	.word	0x20000058

080004f0 <btn_callback>:

void btn_callback(button_id btn_id) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	71fb      	strb	r3, [r7, #7]
	switch (btn_id) {
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	2b02      	cmp	r3, #2
 80004fe:	d00a      	beq.n	8000516 <btn_callback+0x26>
 8000500:	2b02      	cmp	r3, #2
 8000502:	dc11      	bgt.n	8000528 <btn_callback+0x38>
 8000504:	2b00      	cmp	r3, #0
 8000506:	d00b      	beq.n	8000520 <btn_callback+0x30>
 8000508:	2b01      	cmp	r3, #1
 800050a:	d10d      	bne.n	8000528 <btn_callback+0x38>
		case BTN_PLAYER1:
			game_change_active_player(&game, PLAYER1);
 800050c:	2100      	movs	r1, #0
 800050e:	4809      	ldr	r0, [pc, #36]	@ (8000534 <btn_callback+0x44>)
 8000510:	f000 f958 	bl	80007c4 <game_change_active_player>
			break;
 8000514:	e009      	b.n	800052a <btn_callback+0x3a>
		case BTN_PLAYER2:
			game_change_active_player(&game, PLAYER2);
 8000516:	2101      	movs	r1, #1
 8000518:	4806      	ldr	r0, [pc, #24]	@ (8000534 <btn_callback+0x44>)
 800051a:	f000 f953 	bl	80007c4 <game_change_active_player>
			break;
 800051e:	e004      	b.n	800052a <btn_callback+0x3a>
		case BTN_MATCH_RESET:
			game_stop(&game);
 8000520:	4804      	ldr	r0, [pc, #16]	@ (8000534 <btn_callback+0x44>)
 8000522:	f000 f941 	bl	80007a8 <game_stop>
			break;
 8000526:	e000      	b.n	800052a <btn_callback+0x3a>
		default:
			break;
 8000528:	bf00      	nop
	}
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	20000058 	.word	0x20000058

08000538 <setup>:

void setup() {
 8000538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800053a:	b08d      	sub	sp, #52	@ 0x34
 800053c:	af0a      	add	r7, sp, #40	@ 0x28

	// Initialize players time with 30 minutes
	player_time_t player_time;
	player_time.minutes = 30;
 800053e:	231e      	movs	r3, #30
 8000540:	603b      	str	r3, [r7, #0]
	player_time.seconds = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	607b      	str	r3, [r7, #4]

	// Initialize Displays
	display_init(DISPLAY1);
 8000546:	2000      	movs	r0, #0
 8000548:	f000 f886 	bl	8000658 <display_init>
	display_init(DISPLAY2);
 800054c:	2001      	movs	r0, #1
 800054e:	f000 f883 	bl	8000658 <display_init>

	// Initialize Players
	player_init(&player1, player_time, PLAYER1, DISPLAY1);
 8000552:	2300      	movs	r3, #0
 8000554:	9300      	str	r3, [sp, #0]
 8000556:	2300      	movs	r3, #0
 8000558:	463a      	mov	r2, r7
 800055a:	ca06      	ldmia	r2, {r1, r2}
 800055c:	4816      	ldr	r0, [pc, #88]	@ (80005b8 <setup+0x80>)
 800055e:	f000 f990 	bl	8000882 <player_init>
	player_init(&player2, player_time, PLAYER2, DISPLAY2);
 8000562:	2301      	movs	r3, #1
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	2301      	movs	r3, #1
 8000568:	463a      	mov	r2, r7
 800056a:	ca06      	ldmia	r2, {r1, r2}
 800056c:	4813      	ldr	r0, [pc, #76]	@ (80005bc <setup+0x84>)
 800056e:	f000 f988 	bl	8000882 <player_init>

	// Initialize and Start game
	game_init(&game, player1, player2);
 8000572:	4e11      	ldr	r6, [pc, #68]	@ (80005b8 <setup+0x80>)
 8000574:	4b11      	ldr	r3, [pc, #68]	@ (80005bc <setup+0x84>)
 8000576:	ac03      	add	r4, sp, #12
 8000578:	461d      	mov	r5, r3
 800057a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800057c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800057e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000582:	e884 0003 	stmia.w	r4, {r0, r1}
 8000586:	466c      	mov	r4, sp
 8000588:	f106 030c 	add.w	r3, r6, #12
 800058c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000590:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000594:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000598:	4809      	ldr	r0, [pc, #36]	@ (80005c0 <setup+0x88>)
 800059a:	f000 f8a9 	bl	80006f0 <game_init>
	game_start(&game);
 800059e:	4808      	ldr	r0, [pc, #32]	@ (80005c0 <setup+0x88>)
 80005a0:	f000 f8ea 	bl	8000778 <game_start>

	// Attach callbacks
	timer_attach_callback(tim_callback);
 80005a4:	4807      	ldr	r0, [pc, #28]	@ (80005c4 <setup+0x8c>)
 80005a6:	f000 fa2d 	bl	8000a04 <timer_attach_callback>
	button_attach_callback(btn_callback);
 80005aa:	4807      	ldr	r0, [pc, #28]	@ (80005c8 <setup+0x90>)
 80005ac:	f000 f816 	bl	80005dc <button_attach_callback>
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b8:	20000028 	.word	0x20000028
 80005bc:	20000040 	.word	0x20000040
 80005c0:	20000058 	.word	0x20000058
 80005c4:	080004c9 	.word	0x080004c9
 80005c8:	080004f1 	.word	0x080004f1

080005cc <loop>:

void loop() {
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0

}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
	...

080005dc <button_attach_callback>:
#include "button.h"
#include "main.h"

void (*button_callback) (button_id btn_id) = NULL;

void button_attach_callback(void (*callback) (button_id btn_id)) {
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	button_callback = callback;
 80005e4:	4a04      	ldr	r2, [pc, #16]	@ (80005f8 <button_attach_callback+0x1c>)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	6013      	str	r3, [r2, #0]
}
 80005ea:	bf00      	nop
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	20000090 	.word	0x20000090

080005fc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	80fb      	strh	r3, [r7, #6]

	if (button_callback == NULL) return;
 8000606:	4b13      	ldr	r3, [pc, #76]	@ (8000654 <HAL_GPIO_EXTI_Callback+0x58>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d01c      	beq.n	8000648 <HAL_GPIO_EXTI_Callback+0x4c>

	switch (GPIO_Pin) {
 800060e:	88fb      	ldrh	r3, [r7, #6]
 8000610:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000614:	d009      	beq.n	800062a <HAL_GPIO_EXTI_Callback+0x2e>
 8000616:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800061a:	dc17      	bgt.n	800064c <HAL_GPIO_EXTI_Callback+0x50>
 800061c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000620:	d00d      	beq.n	800063e <HAL_GPIO_EXTI_Callback+0x42>
 8000622:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000626:	d005      	beq.n	8000634 <HAL_GPIO_EXTI_Callback+0x38>
			break;
		case BTN_PLAYER2_Pin:
			button_callback(BTN_PLAYER2);
			break;
		default:
			break;
 8000628:	e010      	b.n	800064c <HAL_GPIO_EXTI_Callback+0x50>
			button_callback(BTN_MATCH_RESET);
 800062a:	4b0a      	ldr	r3, [pc, #40]	@ (8000654 <HAL_GPIO_EXTI_Callback+0x58>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2000      	movs	r0, #0
 8000630:	4798      	blx	r3
			break;
 8000632:	e00c      	b.n	800064e <HAL_GPIO_EXTI_Callback+0x52>
			button_callback(BTN_PLAYER1);
 8000634:	4b07      	ldr	r3, [pc, #28]	@ (8000654 <HAL_GPIO_EXTI_Callback+0x58>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2001      	movs	r0, #1
 800063a:	4798      	blx	r3
			break;
 800063c:	e007      	b.n	800064e <HAL_GPIO_EXTI_Callback+0x52>
			button_callback(BTN_PLAYER2);
 800063e:	4b05      	ldr	r3, [pc, #20]	@ (8000654 <HAL_GPIO_EXTI_Callback+0x58>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2002      	movs	r0, #2
 8000644:	4798      	blx	r3
			break;
 8000646:	e002      	b.n	800064e <HAL_GPIO_EXTI_Callback+0x52>
	if (button_callback == NULL) return;
 8000648:	bf00      	nop
 800064a:	e000      	b.n	800064e <HAL_GPIO_EXTI_Callback+0x52>
			break;
 800064c:	bf00      	nop
	}
}
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000090 	.word	0x20000090

08000658 <display_init>:
#include "tm1637.h"

tm1637_t display1;
tm1637_t display2;

void display_init(display_id dsp_id) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af02      	add	r7, sp, #8
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
	switch (dsp_id) {
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d002      	beq.n	800066e <display_init+0x16>
 8000668:	2b01      	cmp	r3, #1
 800066a:	d00a      	beq.n	8000682 <display_init+0x2a>
			break;
		case DISPLAY2:
			tm1637Init(&display2, SCL2_GPIO_Port, SDA2_GPIO_Port, SCL2_Pin, SDA2_Pin);
			break;
		default:
			break;
 800066c:	e012      	b.n	8000694 <display_init+0x3c>
			tm1637Init(&display1, SCL1_GPIO_Port, SDA1_GPIO_Port, SCL1_Pin, SDA1_Pin);
 800066e:	2308      	movs	r3, #8
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000676:	4a09      	ldr	r2, [pc, #36]	@ (800069c <display_init+0x44>)
 8000678:	4908      	ldr	r1, [pc, #32]	@ (800069c <display_init+0x44>)
 800067a:	4809      	ldr	r0, [pc, #36]	@ (80006a0 <display_init+0x48>)
 800067c:	f000 f9ec 	bl	8000a58 <tm1637Init>
			break;
 8000680:	e008      	b.n	8000694 <display_init+0x3c>
			tm1637Init(&display2, SCL2_GPIO_Port, SDA2_GPIO_Port, SCL2_Pin, SDA2_Pin);
 8000682:	2380      	movs	r3, #128	@ 0x80
 8000684:	9300      	str	r3, [sp, #0]
 8000686:	2340      	movs	r3, #64	@ 0x40
 8000688:	4a04      	ldr	r2, [pc, #16]	@ (800069c <display_init+0x44>)
 800068a:	4904      	ldr	r1, [pc, #16]	@ (800069c <display_init+0x44>)
 800068c:	4805      	ldr	r0, [pc, #20]	@ (80006a4 <display_init+0x4c>)
 800068e:	f000 f9e3 	bl	8000a58 <tm1637Init>
			break;
 8000692:	bf00      	nop
	}
}
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40020400 	.word	0x40020400
 80006a0:	20000094 	.word	0x20000094
 80006a4:	200000a0 	.word	0x200000a0

080006a8 <display_show>:
		default:
			break;
	}
}

void display_show(display_id dsp_id, int value) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af02      	add	r7, sp, #8
 80006ae:	4603      	mov	r3, r0
 80006b0:	6039      	str	r1, [r7, #0]
 80006b2:	71fb      	strb	r3, [r7, #7]
	switch(dsp_id) {
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d002      	beq.n	80006c0 <display_show+0x18>
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d008      	beq.n	80006d0 <display_show+0x28>
			break;
		case DISPLAY2:
			tm1637DisplayDecimal(display2, value, 1);
			break;
		default:
			break;
 80006be:	e00f      	b.n	80006e0 <display_show+0x38>
			tm1637DisplayDecimal(display1, value, 1);
 80006c0:	4a09      	ldr	r2, [pc, #36]	@ (80006e8 <display_show+0x40>)
 80006c2:	2301      	movs	r3, #1
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80006ca:	f000 f9df 	bl	8000a8c <tm1637DisplayDecimal>
			break;
 80006ce:	e007      	b.n	80006e0 <display_show+0x38>
			tm1637DisplayDecimal(display2, value, 1);
 80006d0:	4a06      	ldr	r2, [pc, #24]	@ (80006ec <display_show+0x44>)
 80006d2:	2301      	movs	r3, #1
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80006da:	f000 f9d7 	bl	8000a8c <tm1637DisplayDecimal>
			break;
 80006de:	bf00      	nop
	}
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000094 	.word	0x20000094
 80006ec:	200000a0 	.word	0x200000a0

080006f0 <game_init>:

extern TIM_HandleTypeDef htim2;

void game_display_timers(game_t game);

void game_init(game_t *game, player_t player1, player_t player2) {
 80006f0:	b084      	sub	sp, #16
 80006f2:	b5b0      	push	{r4, r5, r7, lr}
 80006f4:	b084      	sub	sp, #16
 80006f6:	af02      	add	r7, sp, #8
 80006f8:	6078      	str	r0, [r7, #4]
 80006fa:	f107 001c 	add.w	r0, r7, #28
 80006fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	game->state = STOPPED;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
	game->player1 = player1;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	1d1c      	adds	r4, r3, #4
 800070c:	f107 051c 	add.w	r5, r7, #28
 8000710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000714:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000718:	e884 0003 	stmia.w	r4, {r0, r1}
	game->player2 = player2;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f103 041c 	add.w	r4, r3, #28
 8000722:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 8000726:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000728:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800072a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800072e:	e884 0003 	stmia.w	r4, {r0, r1}
	game->active_player = PLAYER1;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2200      	movs	r2, #0
 8000736:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	player_display_curr(game->player1);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	466c      	mov	r4, sp
 800073e:	f103 0214 	add.w	r2, r3, #20
 8000742:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000746:	e884 0003 	stmia.w	r4, {r0, r1}
 800074a:	3304      	adds	r3, #4
 800074c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800074e:	f000 f904 	bl	800095a <player_display_curr>
	player_display_curr(game->player2);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	466c      	mov	r4, sp
 8000756:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 800075a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800075e:	e884 0003 	stmia.w	r4, {r0, r1}
 8000762:	331c      	adds	r3, #28
 8000764:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000766:	f000 f8f8 	bl	800095a <player_display_curr>
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000774:	b004      	add	sp, #16
 8000776:	4770      	bx	lr

08000778 <game_start>:

void game_start(game_t *game) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	game->state = ACTIVE;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2201      	movs	r2, #1
 8000784:	701a      	strb	r2, [r3, #0]
	player_time_restart(&game->player1);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	3304      	adds	r3, #4
 800078a:	4618      	mov	r0, r3
 800078c:	f000 f89b 	bl	80008c6 <player_time_restart>
	player_time_restart(&game->player2);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	331c      	adds	r3, #28
 8000794:	4618      	mov	r0, r3
 8000796:	f000 f896 	bl	80008c6 <player_time_restart>
	timer_start(TIM_TICK);
 800079a:	2000      	movs	r0, #0
 800079c:	f000 f8f4 	bl	8000988 <timer_start>
}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <game_stop>:

void game_stop(game_t *game) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	game->state = STOPPED;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2200      	movs	r2, #0
 80007b4:	701a      	strb	r2, [r3, #0]
	timer_stop(TIM_TICK);
 80007b6:	2000      	movs	r0, #0
 80007b8:	f000 f8fa 	bl	80009b0 <timer_stop>
	// TODO - Acionamento do Buzzer
}
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <game_change_active_player>:

void game_change_active_player(game_t *game, player_id plr_id) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	460b      	mov	r3, r1
 80007ce:	70fb      	strb	r3, [r7, #3]

	if (game->active_player == plr_id) return;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80007d6:	78fa      	ldrb	r2, [r7, #3]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d00e      	beq.n	80007fa <game_change_active_player+0x36>

	game->active_player = plr_id;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	78fa      	ldrb	r2, [r7, #3]
 80007e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	timer_restart(TIM_TICK);
 80007e4:	2000      	movs	r0, #0
 80007e6:	f000 f8f7 	bl	80009d8 <timer_restart>

	if (game->state == STOPPED) {
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d104      	bne.n	80007fc <game_change_active_player+0x38>
		game_start(game);
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff ffc0 	bl	8000778 <game_start>
 80007f8:	e000      	b.n	80007fc <game_change_active_player+0x38>
	if (game->active_player == plr_id) return;
 80007fa:	bf00      	nop
	}
}
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <game_update>:

void game_update(game_t *game) {
 8000802:	b590      	push	{r4, r7, lr}
 8000804:	b087      	sub	sp, #28
 8000806:	af02      	add	r7, sp, #8
 8000808:	6078      	str	r0, [r7, #4]
	if (game->state == STOPPED) return;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d031      	beq.n	8000876 <game_update+0x74>

	player_t *active_player = NULL;
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]

	if (game->active_player == PLAYER1) {
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800081c:	2b00      	cmp	r3, #0
 800081e:	d103      	bne.n	8000828 <game_update+0x26>
		active_player = &game->player1;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3304      	adds	r3, #4
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	e002      	b.n	800082e <game_update+0x2c>
	} else {
		active_player = &game->player2;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	331c      	adds	r3, #28
 800082c:	60fb      	str	r3, [r7, #12]
	}

	if (active_player == NULL) return;
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d022      	beq.n	800087a <game_update+0x78>

	if (player_time_ended(*active_player)) {
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	466c      	mov	r4, sp
 8000838:	f103 0210 	add.w	r2, r3, #16
 800083c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000840:	e884 0003 	stmia.w	r4, {r0, r1}
 8000844:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000846:	f000 f850 	bl	80008ea <player_time_ended>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d003      	beq.n	8000858 <game_update+0x56>
		game_stop(game);
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f7ff ffa9 	bl	80007a8 <game_stop>
 8000856:	e011      	b.n	800087c <game_update+0x7a>
	} else {
		player_time_dec(active_player);
 8000858:	68f8      	ldr	r0, [r7, #12]
 800085a:	f000 f862 	bl	8000922 <player_time_dec>
		player_display_curr(*active_player);
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	466c      	mov	r4, sp
 8000862:	f103 0210 	add.w	r2, r3, #16
 8000866:	e892 0003 	ldmia.w	r2, {r0, r1}
 800086a:	e884 0003 	stmia.w	r4, {r0, r1}
 800086e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000870:	f000 f873 	bl	800095a <player_display_curr>
 8000874:	e002      	b.n	800087c <game_update+0x7a>
	if (game->state == STOPPED) return;
 8000876:	bf00      	nop
 8000878:	e000      	b.n	800087c <game_update+0x7a>
	if (active_player == NULL) return;
 800087a:	bf00      	nop
	}
}
 800087c:	3714      	adds	r7, #20
 800087e:	46bd      	mov	sp, r7
 8000880:	bd90      	pop	{r4, r7, pc}

08000882 <player_init>:
 *      Author: matheusbucater
 */

#include "player.h"

void player_init(player_t *player, player_time_t start_time, player_id plr_id, display_id dsp_id) {
 8000882:	b480      	push	{r7}
 8000884:	b085      	sub	sp, #20
 8000886:	af00      	add	r7, sp, #0
 8000888:	60f8      	str	r0, [r7, #12]
 800088a:	1d38      	adds	r0, r7, #4
 800088c:	e880 0006 	stmia.w	r0, {r1, r2}
 8000890:	70fb      	strb	r3, [r7, #3]
	player->start_time = start_time;
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	3304      	adds	r3, #4
 8000896:	1d3a      	adds	r2, r7, #4
 8000898:	e892 0003 	ldmia.w	r2, {r0, r1}
 800089c:	e883 0003 	stmia.w	r3, {r0, r1}
	player->curr_time = start_time;
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	330c      	adds	r3, #12
 80008a4:	1d3a      	adds	r2, r7, #4
 80008a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008aa:	e883 0003 	stmia.w	r3, {r0, r1}
	player->player = plr_id;
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	78fa      	ldrb	r2, [r7, #3]
 80008b2:	701a      	strb	r2, [r3, #0]
	player->display = dsp_id;
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	7e3a      	ldrb	r2, [r7, #24]
 80008b8:	751a      	strb	r2, [r3, #20]
}
 80008ba:	bf00      	nop
 80008bc:	3714      	adds	r7, #20
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <player_time_restart>:

void player_time_restart(player_t *player) {
 80008c6:	b480      	push	{r7}
 80008c8:	b083      	sub	sp, #12
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
	player->curr_time = player->start_time;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	330c      	adds	r3, #12
 80008d4:	3204      	adds	r2, #4
 80008d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008da:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr

080008ea <player_time_ended>:

int player_time_ended(player_t player) {
 80008ea:	b084      	sub	sp, #16
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	f107 0c10 	add.w	ip, r7, #16
 80008f6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t min = player.curr_time.minutes;
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	607b      	str	r3, [r7, #4]
	uint32_t sec = player.curr_time.seconds;
 80008fe:	6a3b      	ldr	r3, [r7, #32]
 8000900:	603b      	str	r3, [r7, #0]

	if (min == 0 && sec == 0) {
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d104      	bne.n	8000912 <player_time_ended+0x28>
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d101      	bne.n	8000912 <player_time_ended+0x28>
		return 1;
 800090e:	2301      	movs	r3, #1
 8000910:	e000      	b.n	8000914 <player_time_ended+0x2a>
	} else {
		return 0;
 8000912:	2300      	movs	r3, #0
	}
}
 8000914:	4618      	mov	r0, r3
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	b004      	add	sp, #16
 8000920:	4770      	bx	lr

08000922 <player_time_dec>:

void player_time_dec(player_t *player) {
 8000922:	b480      	push	{r7}
 8000924:	b083      	sub	sp, #12
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
	if (player->curr_time.seconds == 0) {
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	691b      	ldr	r3, [r3, #16]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d108      	bne.n	8000944 <player_time_dec+0x22>
		player->curr_time.minutes--;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	68db      	ldr	r3, [r3, #12]
 8000936:	1e5a      	subs	r2, r3, #1
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	60da      	str	r2, [r3, #12]
		player->curr_time.seconds = 59;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	223b      	movs	r2, #59	@ 0x3b
 8000940:	611a      	str	r2, [r3, #16]
	} else {
		player->curr_time.seconds--;
	}
}
 8000942:	e004      	b.n	800094e <player_time_dec+0x2c>
		player->curr_time.seconds--;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	691b      	ldr	r3, [r3, #16]
 8000948:	1e5a      	subs	r2, r3, #1
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	611a      	str	r2, [r3, #16]
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <player_display_curr>:

void player_display_curr(player_t player) {
 800095a:	b084      	sub	sp, #16
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
 8000960:	f107 0c08 	add.w	ip, r7, #8
 8000964:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	display_show(player.display, player.curr_time.minutes * 100 + player.curr_time.seconds);
 8000968:	7f38      	ldrb	r0, [r7, #28]
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	2264      	movs	r2, #100	@ 0x64
 800096e:	fb03 f202 	mul.w	r2, r3, r2
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	4413      	add	r3, r2
 8000976:	4619      	mov	r1, r3
 8000978:	f7ff fe96 	bl	80006a8 <display_show>
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000984:	b004      	add	sp, #16
 8000986:	4770      	bx	lr

08000988 <timer_start>:

extern TIM_HandleTypeDef htim2;

void (*timer_callback) (timer_id id) = NULL;

void timer_start(timer_id tim_id) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]
	switch (tim_id) {
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d103      	bne.n	80009a0 <timer_start+0x18>
		case TIM_TICK:
			HAL_TIM_Base_Start_IT(&htim2);
 8000998:	4804      	ldr	r0, [pc, #16]	@ (80009ac <timer_start+0x24>)
 800099a:	f001 fbbb 	bl	8002114 <HAL_TIM_Base_Start_IT>
			break;
 800099e:	e000      	b.n	80009a2 <timer_start+0x1a>
		default:
			break;
 80009a0:	bf00      	nop
	}
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	200000b0 	.word	0x200000b0

080009b0 <timer_stop>:

void timer_stop(timer_id tim_id) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
	switch (tim_id) {
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d103      	bne.n	80009c8 <timer_stop+0x18>
		case TIM_TICK:
			HAL_TIM_Base_Stop_IT(&htim2);
 80009c0:	4804      	ldr	r0, [pc, #16]	@ (80009d4 <timer_stop+0x24>)
 80009c2:	f001 fc09 	bl	80021d8 <HAL_TIM_Base_Stop_IT>
			break;
 80009c6:	e000      	b.n	80009ca <timer_stop+0x1a>
		default:
			break;
 80009c8:	bf00      	nop
	}
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200000b0 	.word	0x200000b0

080009d8 <timer_restart>:

void timer_restart(timer_id tim_id) {
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
	switch (tim_id) {
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d104      	bne.n	80009f2 <timer_restart+0x1a>
		case TIM_TICK:
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 80009e8:	4b05      	ldr	r3, [pc, #20]	@ (8000a00 <timer_restart+0x28>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2200      	movs	r2, #0
 80009ee:	625a      	str	r2, [r3, #36]	@ 0x24
			break;
 80009f0:	e000      	b.n	80009f4 <timer_restart+0x1c>
		default:
			break;
 80009f2:	bf00      	nop
	}
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	200000b0 	.word	0x200000b0

08000a04 <timer_attach_callback>:

void timer_attach_callback(void (*callback) (timer_id tim_id)) {
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	timer_callback = callback;
 8000a0c:	4a04      	ldr	r2, [pc, #16]	@ (8000a20 <timer_attach_callback+0x1c>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6013      	str	r3, [r2, #0]
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	200000ac 	.word	0x200000ac

08000a24 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]

	if (timer_callback == NULL) return;
 8000a2c:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d008      	beq.n	8000a46 <HAL_TIM_PeriodElapsedCallback+0x22>

	if (htim == &htim2) {
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4a07      	ldr	r2, [pc, #28]	@ (8000a54 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d105      	bne.n	8000a48 <HAL_TIM_PeriodElapsedCallback+0x24>
		timer_callback(TIM_TICK);
 8000a3c:	4b04      	ldr	r3, [pc, #16]	@ (8000a50 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2000      	movs	r0, #0
 8000a42:	4798      	blx	r3
 8000a44:	e000      	b.n	8000a48 <HAL_TIM_PeriodElapsedCallback+0x24>
	if (timer_callback == NULL) return;
 8000a46:	bf00      	nop
	}
}
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	200000ac 	.word	0x200000ac
 8000a54:	200000b0 	.word	0x200000b0

08000a58 <tm1637Init>:
    0x00
};


void tm1637Init(tm1637_t* display, GPIO_TypeDef* clk_port, GPIO_TypeDef* dio_port, uint16_t clk_pin, uint16_t dio_pin)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	60b9      	str	r1, [r7, #8]
 8000a62:	607a      	str	r2, [r7, #4]
 8000a64:	807b      	strh	r3, [r7, #2]
	display->clk_port = clk_port;
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	68ba      	ldr	r2, [r7, #8]
 8000a6a:	601a      	str	r2, [r3, #0]
	display->dio_port = dio_port;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	605a      	str	r2, [r3, #4]
	display->clk_pin = clk_pin;
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	887a      	ldrh	r2, [r7, #2]
 8000a76:	811a      	strh	r2, [r3, #8]
	display->dio_pin = dio_pin;
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	8b3a      	ldrh	r2, [r7, #24]
 8000a7c:	815a      	strh	r2, [r3, #10]
}
 8000a7e:	bf00      	nop
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
	...

08000a8c <tm1637DisplayDecimal>:

void tm1637DisplayDecimal(tm1637_t display, int v, int displaySeparator)
{
 8000a8c:	b590      	push	{r4, r7, lr}
 8000a8e:	b089      	sub	sp, #36	@ 0x24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	1d3c      	adds	r4, r7, #4
 8000a94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000a98:	603b      	str	r3, [r7, #0]
    unsigned char digitArr[4];
    for (int i = 0; i < 4; ++i) {
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
 8000a9e:	e032      	b.n	8000b06 <tm1637DisplayDecimal+0x7a>
        digitArr[i] = segmentMap[v % 10];
 8000aa0:	6839      	ldr	r1, [r7, #0]
 8000aa2:	4b3d      	ldr	r3, [pc, #244]	@ (8000b98 <tm1637DisplayDecimal+0x10c>)
 8000aa4:	fb83 2301 	smull	r2, r3, r3, r1
 8000aa8:	109a      	asrs	r2, r3, #2
 8000aaa:	17cb      	asrs	r3, r1, #31
 8000aac:	1ad2      	subs	r2, r2, r3
 8000aae:	4613      	mov	r3, r2
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	4413      	add	r3, r2
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	1aca      	subs	r2, r1, r3
 8000ab8:	4b38      	ldr	r3, [pc, #224]	@ (8000b9c <tm1637DisplayDecimal+0x110>)
 8000aba:	5c99      	ldrb	r1, [r3, r2]
 8000abc:	f107 0214 	add.w	r2, r7, #20
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	460a      	mov	r2, r1
 8000ac6:	701a      	strb	r2, [r3, #0]
        if (i == 2 && displaySeparator) {
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	2b02      	cmp	r3, #2
 8000acc:	d110      	bne.n	8000af0 <tm1637DisplayDecimal+0x64>
 8000ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d00d      	beq.n	8000af0 <tm1637DisplayDecimal+0x64>
            digitArr[i] |= 1 << 7;
 8000ad4:	f107 0214 	add.w	r2, r7, #20
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	4413      	add	r3, r2
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ae2:	b2d9      	uxtb	r1, r3
 8000ae4:	f107 0214 	add.w	r2, r7, #20
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	4413      	add	r3, r2
 8000aec:	460a      	mov	r2, r1
 8000aee:	701a      	strb	r2, [r3, #0]
        }
        v /= 10;
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	4a29      	ldr	r2, [pc, #164]	@ (8000b98 <tm1637DisplayDecimal+0x10c>)
 8000af4:	fb82 1203 	smull	r1, r2, r2, r3
 8000af8:	1092      	asrs	r2, r2, #2
 8000afa:	17db      	asrs	r3, r3, #31
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < 4; ++i) {
 8000b00:	69fb      	ldr	r3, [r7, #28]
 8000b02:	3301      	adds	r3, #1
 8000b04:	61fb      	str	r3, [r7, #28]
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	2b03      	cmp	r3, #3
 8000b0a:	ddc9      	ble.n	8000aa0 <tm1637DisplayDecimal+0x14>
    }

    _tm1637Start(display);
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000b12:	f000 f845 	bl	8000ba0 <_tm1637Start>
    _tm1637WriteByte(display, 0x40);
 8000b16:	2340      	movs	r3, #64	@ 0x40
 8000b18:	1d3a      	adds	r2, r7, #4
 8000b1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b1c:	f000 f8a2 	bl	8000c64 <_tm1637WriteByte>
    _tm1637ReadResult(display);
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000b26:	f000 f87e 	bl	8000c26 <_tm1637ReadResult>
    _tm1637Stop(display);
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000b30:	f000 f852 	bl	8000bd8 <_tm1637Stop>

    _tm1637Start(display);
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000b3a:	f000 f831 	bl	8000ba0 <_tm1637Start>
    _tm1637WriteByte(display, 0xc0);
 8000b3e:	23c0      	movs	r3, #192	@ 0xc0
 8000b40:	1d3a      	adds	r2, r7, #4
 8000b42:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b44:	f000 f88e 	bl	8000c64 <_tm1637WriteByte>
    _tm1637ReadResult(display);
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000b4e:	f000 f86a 	bl	8000c26 <_tm1637ReadResult>

    for (int i = 0; i < 4; ++i) {
 8000b52:	2300      	movs	r3, #0
 8000b54:	61bb      	str	r3, [r7, #24]
 8000b56:	e012      	b.n	8000b7e <tm1637DisplayDecimal+0xf2>
        _tm1637WriteByte(display, digitArr[3 - i]);
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	f1c3 0303 	rsb	r3, r3, #3
 8000b5e:	3320      	adds	r3, #32
 8000b60:	443b      	add	r3, r7
 8000b62:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000b66:	1d3a      	adds	r2, r7, #4
 8000b68:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b6a:	f000 f87b 	bl	8000c64 <_tm1637WriteByte>
        _tm1637ReadResult(display);
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000b74:	f000 f857 	bl	8000c26 <_tm1637ReadResult>
    for (int i = 0; i < 4; ++i) {
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	61bb      	str	r3, [r7, #24]
 8000b7e:	69bb      	ldr	r3, [r7, #24]
 8000b80:	2b03      	cmp	r3, #3
 8000b82:	dde9      	ble.n	8000b58 <tm1637DisplayDecimal+0xcc>
    }

    _tm1637Stop(display);
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000b8a:	f000 f825 	bl	8000bd8 <_tm1637Stop>
}
 8000b8e:	bf00      	nop
 8000b90:	3724      	adds	r7, #36	@ 0x24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd90      	pop	{r4, r7, pc}
 8000b96:	bf00      	nop
 8000b98:	66666667 	.word	0x66666667
 8000b9c:	080029b4 	.word	0x080029b4

08000ba0 <_tm1637Start>:
    _tm1637ReadResult(display);
    _tm1637Stop(display);
}

void _tm1637Start(tm1637_t display)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    _tm1637ClkHigh(display);
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000bb2:	f000 f8ab 	bl	8000d0c <_tm1637ClkHigh>
    _tm1637DioHigh(display);
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000bbc:	f000 f8c6 	bl	8000d4c <_tm1637DioHigh>
    _tm1637DelayUsec(2);
 8000bc0:	2002      	movs	r0, #2
 8000bc2:	f000 f887 	bl	8000cd4 <_tm1637DelayUsec>
    _tm1637DioLow(display);
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000bcc:	f000 f8ce 	bl	8000d6c <_tm1637DioLow>
}
 8000bd0:	bf00      	nop
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <_tm1637Stop>:

void _tm1637Stop(tm1637_t display)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    _tm1637ClkLow(display);
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000bea:	f000 f89f 	bl	8000d2c <_tm1637ClkLow>
    _tm1637DelayUsec(2);
 8000bee:	2002      	movs	r0, #2
 8000bf0:	f000 f870 	bl	8000cd4 <_tm1637DelayUsec>
    _tm1637DioLow(display);
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000bfa:	f000 f8b7 	bl	8000d6c <_tm1637DioLow>
    _tm1637DelayUsec(2);
 8000bfe:	2002      	movs	r0, #2
 8000c00:	f000 f868 	bl	8000cd4 <_tm1637DelayUsec>
    _tm1637ClkHigh(display);
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c0a:	f000 f87f 	bl	8000d0c <_tm1637ClkHigh>
    _tm1637DelayUsec(2);
 8000c0e:	2002      	movs	r0, #2
 8000c10:	f000 f860 	bl	8000cd4 <_tm1637DelayUsec>
    _tm1637DioHigh(display);
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c1a:	f000 f897 	bl	8000d4c <_tm1637DioHigh>
}
 8000c1e:	bf00      	nop
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <_tm1637ReadResult>:

void _tm1637ReadResult(tm1637_t display)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b084      	sub	sp, #16
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    _tm1637ClkLow(display);
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c38:	f000 f878 	bl	8000d2c <_tm1637ClkLow>
    _tm1637DelayUsec(5);
 8000c3c:	2005      	movs	r0, #5
 8000c3e:	f000 f849 	bl	8000cd4 <_tm1637DelayUsec>
    // while (dio); // We're cheating here and not actually reading back the response.
    _tm1637ClkHigh(display);
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c48:	f000 f860 	bl	8000d0c <_tm1637ClkHigh>
    _tm1637DelayUsec(2);
 8000c4c:	2002      	movs	r0, #2
 8000c4e:	f000 f841 	bl	8000cd4 <_tm1637DelayUsec>
    _tm1637ClkLow(display);
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c58:	f000 f868 	bl	8000d2c <_tm1637ClkLow>
}
 8000c5c:	bf00      	nop
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <_tm1637WriteByte>:

void _tm1637WriteByte(tm1637_t display, unsigned char b)
{
 8000c64:	b590      	push	{r4, r7, lr}
 8000c66:	b087      	sub	sp, #28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	1d3c      	adds	r4, r7, #4
 8000c6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000c70:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < 8; ++i) {
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	e025      	b.n	8000cc4 <_tm1637WriteByte+0x60>
        _tm1637ClkLow(display);
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c7e:	f000 f855 	bl	8000d2c <_tm1637ClkLow>
        if (b & 0x01) {
 8000c82:	78fb      	ldrb	r3, [r7, #3]
 8000c84:	f003 0301 	and.w	r3, r3, #1
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d005      	beq.n	8000c98 <_tm1637WriteByte+0x34>
            _tm1637DioHigh(display);
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c92:	f000 f85b 	bl	8000d4c <_tm1637DioHigh>
 8000c96:	e004      	b.n	8000ca2 <_tm1637WriteByte+0x3e>
        }
        else {
            _tm1637DioLow(display);
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c9e:	f000 f865 	bl	8000d6c <_tm1637DioLow>
        }
        _tm1637DelayUsec(3);
 8000ca2:	2003      	movs	r0, #3
 8000ca4:	f000 f816 	bl	8000cd4 <_tm1637DelayUsec>
        b >>= 1;
 8000ca8:	78fb      	ldrb	r3, [r7, #3]
 8000caa:	085b      	lsrs	r3, r3, #1
 8000cac:	70fb      	strb	r3, [r7, #3]
        _tm1637ClkHigh(display);
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000cb4:	f000 f82a 	bl	8000d0c <_tm1637ClkHigh>
        _tm1637DelayUsec(3);
 8000cb8:	2003      	movs	r0, #3
 8000cba:	f000 f80b 	bl	8000cd4 <_tm1637DelayUsec>
    for (int i = 0; i < 8; ++i) {
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	617b      	str	r3, [r7, #20]
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	2b07      	cmp	r3, #7
 8000cc8:	ddd6      	ble.n	8000c78 <_tm1637WriteByte+0x14>
    }
}
 8000cca:	bf00      	nop
 8000ccc:	bf00      	nop
 8000cce:	371c      	adds	r7, #28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd90      	pop	{r4, r7, pc}

08000cd4 <_tm1637DelayUsec>:

void _tm1637DelayUsec(unsigned int i)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
    for (; i>0; i--) {
 8000cdc:	e00c      	b.n	8000cf8 <_tm1637DelayUsec+0x24>
        for (int j = 0; j < 10; ++j) {
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	e003      	b.n	8000cec <_tm1637DelayUsec+0x18>
            __asm__ __volatile__("nop\n\t":::"memory");
 8000ce4:	bf00      	nop
        for (int j = 0; j < 10; ++j) {
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	2b09      	cmp	r3, #9
 8000cf0:	ddf8      	ble.n	8000ce4 <_tm1637DelayUsec+0x10>
    for (; i>0; i--) {
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d1ef      	bne.n	8000cde <_tm1637DelayUsec+0xa>
        }
    }
}
 8000cfe:	bf00      	nop
 8000d00:	bf00      	nop
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <_tm1637ClkHigh>:

void _tm1637ClkHigh(tm1637_t display)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    HAL_GPIO_WritePin(display.clk_port, display.clk_pin, GPIO_PIN_SET);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	89b9      	ldrh	r1, [r7, #12]
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 fd52 	bl	80017c8 <HAL_GPIO_WritePin>
}
 8000d24:	bf00      	nop
 8000d26:	3710      	adds	r7, #16
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <_tm1637ClkLow>:

void _tm1637ClkLow(tm1637_t display)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    HAL_GPIO_WritePin(display.clk_port, display.clk_pin, GPIO_PIN_RESET);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	89b9      	ldrh	r1, [r7, #12]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 fd42 	bl	80017c8 <HAL_GPIO_WritePin>
}
 8000d44:	bf00      	nop
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <_tm1637DioHigh>:

void _tm1637DioHigh(tm1637_t display)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    HAL_GPIO_WritePin(display.dio_port, display.dio_pin, GPIO_PIN_SET);
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	89f9      	ldrh	r1, [r7, #14]
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 fd32 	bl	80017c8 <HAL_GPIO_WritePin>
}
 8000d64:	bf00      	nop
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <_tm1637DioLow>:

void _tm1637DioLow(tm1637_t display)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    HAL_GPIO_WritePin(display.dio_port, display.dio_pin, GPIO_PIN_RESET);
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	89f9      	ldrh	r1, [r7, #14]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 fd22 	bl	80017c8 <HAL_GPIO_WritePin>
}
 8000d84:	bf00      	nop
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d90:	f000 fa12 	bl	80011b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d94:	f000 f80a 	bl	8000dac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d98:	f000 f8b4 	bl	8000f04 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d9c:	f000 f864 	bl	8000e68 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8000da0:	f7ff fbca 	bl	8000538 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8000da4:	f7ff fc12 	bl	80005cc <loop>
 8000da8:	e7fc      	b.n	8000da4 <main+0x18>
	...

08000dac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b094      	sub	sp, #80	@ 0x50
 8000db0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db2:	f107 0320 	add.w	r3, r7, #32
 8000db6:	2230      	movs	r2, #48	@ 0x30
 8000db8:	2100      	movs	r1, #0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f001 fdc2 	bl	8002944 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc0:	f107 030c 	add.w	r3, r7, #12
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	4b22      	ldr	r3, [pc, #136]	@ (8000e60 <SystemClock_Config+0xb4>)
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd8:	4a21      	ldr	r2, [pc, #132]	@ (8000e60 <SystemClock_Config+0xb4>)
 8000dda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dde:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e60 <SystemClock_Config+0xb4>)
 8000de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dec:	2300      	movs	r3, #0
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e64 <SystemClock_Config+0xb8>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e64 <SystemClock_Config+0xb8>)
 8000df6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000dfa:	6013      	str	r3, [r2, #0]
 8000dfc:	4b19      	ldr	r3, [pc, #100]	@ (8000e64 <SystemClock_Config+0xb8>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e10:	2310      	movs	r3, #16
 8000e12:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e14:	2300      	movs	r3, #0
 8000e16:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e18:	f107 0320 	add.w	r3, r7, #32
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f000 fd05 	bl	800182c <HAL_RCC_OscConfig>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000e28:	f000 f8ec 	bl	8001004 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e2c:	230f      	movs	r3, #15
 8000e2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000e34:	2380      	movs	r3, #128	@ 0x80
 8000e36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	2100      	movs	r1, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 ff68 	bl	8001d1c <HAL_RCC_ClockConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000e52:	f000 f8d7 	bl	8001004 <Error_Handler>
  }
}
 8000e56:	bf00      	nop
 8000e58:	3750      	adds	r7, #80	@ 0x50
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40007000 	.word	0x40007000

08000e68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e6e:	f107 0308 	add.w	r3, r7, #8
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e7c:	463b      	mov	r3, r7
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e84:	4b1e      	ldr	r3, [pc, #120]	@ (8000f00 <MX_TIM2_Init+0x98>)
 8000e86:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8000e8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000f00 <MX_TIM2_Init+0x98>)
 8000e8e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000e92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e94:	4b1a      	ldr	r3, [pc, #104]	@ (8000f00 <MX_TIM2_Init+0x98>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000e9a:	4b19      	ldr	r3, [pc, #100]	@ (8000f00 <MX_TIM2_Init+0x98>)
 8000e9c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ea0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea2:	4b17      	ldr	r3, [pc, #92]	@ (8000f00 <MX_TIM2_Init+0x98>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea8:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <MX_TIM2_Init+0x98>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000eae:	4814      	ldr	r0, [pc, #80]	@ (8000f00 <MX_TIM2_Init+0x98>)
 8000eb0:	f001 f8e0 	bl	8002074 <HAL_TIM_Base_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000eba:	f000 f8a3 	bl	8001004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ebe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ec2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ec4:	f107 0308 	add.w	r3, r7, #8
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480d      	ldr	r0, [pc, #52]	@ (8000f00 <MX_TIM2_Init+0x98>)
 8000ecc:	f001 faa3 	bl	8002416 <HAL_TIM_ConfigClockSource>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000ed6:	f000 f895 	bl	8001004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eda:	2300      	movs	r3, #0
 8000edc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ee2:	463b      	mov	r3, r7
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4806      	ldr	r0, [pc, #24]	@ (8000f00 <MX_TIM2_Init+0x98>)
 8000ee8:	f001 fcaa 	bl	8002840 <HAL_TIMEx_MasterConfigSynchronization>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000ef2:	f000 f887 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ef6:	bf00      	nop
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	200000b0 	.word	0x200000b0

08000f04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b088      	sub	sp, #32
 8000f08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0a:	f107 030c 	add.w	r3, r7, #12
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	4b36      	ldr	r3, [pc, #216]	@ (8000ff8 <MX_GPIO_Init+0xf4>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	4a35      	ldr	r2, [pc, #212]	@ (8000ff8 <MX_GPIO_Init+0xf4>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2a:	4b33      	ldr	r3, [pc, #204]	@ (8000ff8 <MX_GPIO_Init+0xf4>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ff8 <MX_GPIO_Init+0xf4>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	4a2e      	ldr	r2, [pc, #184]	@ (8000ff8 <MX_GPIO_Init+0xf4>)
 8000f40:	f043 0302 	orr.w	r3, r3, #2
 8000f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f46:	4b2c      	ldr	r3, [pc, #176]	@ (8000ff8 <MX_GPIO_Init+0xf4>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	603b      	str	r3, [r7, #0]
 8000f56:	4b28      	ldr	r3, [pc, #160]	@ (8000ff8 <MX_GPIO_Init+0xf4>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	4a27      	ldr	r2, [pc, #156]	@ (8000ff8 <MX_GPIO_Init+0xf4>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f62:	4b25      	ldr	r3, [pc, #148]	@ (8000ff8 <MX_GPIO_Init+0xf4>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCL1_Pin|SDA1_Pin|SCL2_Pin|SDA2_Pin, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 8000f74:	4821      	ldr	r0, [pc, #132]	@ (8000ffc <MX_GPIO_Init+0xf8>)
 8000f76:	f000 fc27 	bl	80017c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f80:	481f      	ldr	r0, [pc, #124]	@ (8001000 <MX_GPIO_Init+0xfc>)
 8000f82:	f000 fc21 	bl	80017c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SCL1_Pin SDA1_Pin SCL2_Pin SDA2_Pin */
  GPIO_InitStruct.Pin = SCL1_Pin|SDA1_Pin|SCL2_Pin|SDA2_Pin;
 8000f86:	f44f 6399 	mov.w	r3, #1224	@ 0x4c8
 8000f8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000f8c:	2311      	movs	r3, #17
 8000f8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f94:	2302      	movs	r3, #2
 8000f96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4817      	ldr	r0, [pc, #92]	@ (8000ffc <MX_GPIO_Init+0xf8>)
 8000fa0:	f000 fa8e 	bl	80014c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZ_Pin */
  GPIO_InitStruct.Pin = BUZZ_Pin;
 8000fa4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fa8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000faa:	2301      	movs	r3, #1
 8000fac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUZZ_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4810      	ldr	r0, [pc, #64]	@ (8001000 <MX_GPIO_Init+0xfc>)
 8000fbe:	f000 fa7f 	bl	80014c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_PLAYER2_Pin BTN_PLAYER1_Pin BTN_MATCH_RESET_Pin */
  GPIO_InitStruct.Pin = BTN_PLAYER2_Pin|BTN_PLAYER1_Pin|BTN_MATCH_RESET_Pin;
 8000fc2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000fc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fc8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000fcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd2:	f107 030c 	add.w	r3, r7, #12
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4809      	ldr	r0, [pc, #36]	@ (8001000 <MX_GPIO_Init+0xfc>)
 8000fda:	f000 fa71 	bl	80014c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2028      	movs	r0, #40	@ 0x28
 8000fe4:	f000 fa35 	bl	8001452 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fe8:	2028      	movs	r0, #40	@ 0x28
 8000fea:	f000 fa4e 	bl	800148a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fee:	bf00      	nop
 8000ff0:	3720      	adds	r7, #32
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40020400 	.word	0x40020400
 8001000:	40020000 	.word	0x40020000

08001004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001008:	b672      	cpsid	i
}
 800100a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <Error_Handler+0x8>

08001010 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	4b10      	ldr	r3, [pc, #64]	@ (800105c <HAL_MspInit+0x4c>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101e:	4a0f      	ldr	r2, [pc, #60]	@ (800105c <HAL_MspInit+0x4c>)
 8001020:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001024:	6453      	str	r3, [r2, #68]	@ 0x44
 8001026:	4b0d      	ldr	r3, [pc, #52]	@ (800105c <HAL_MspInit+0x4c>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800102a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	603b      	str	r3, [r7, #0]
 8001036:	4b09      	ldr	r3, [pc, #36]	@ (800105c <HAL_MspInit+0x4c>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103a:	4a08      	ldr	r2, [pc, #32]	@ (800105c <HAL_MspInit+0x4c>)
 800103c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001040:	6413      	str	r3, [r2, #64]	@ 0x40
 8001042:	4b06      	ldr	r3, [pc, #24]	@ (800105c <HAL_MspInit+0x4c>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	40023800 	.word	0x40023800

08001060 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001070:	d115      	bne.n	800109e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	4b0c      	ldr	r3, [pc, #48]	@ (80010a8 <HAL_TIM_Base_MspInit+0x48>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107a:	4a0b      	ldr	r2, [pc, #44]	@ (80010a8 <HAL_TIM_Base_MspInit+0x48>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6413      	str	r3, [r2, #64]	@ 0x40
 8001082:	4b09      	ldr	r3, [pc, #36]	@ (80010a8 <HAL_TIM_Base_MspInit+0x48>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	201c      	movs	r0, #28
 8001094:	f000 f9dd 	bl	8001452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001098:	201c      	movs	r0, #28
 800109a:	f000 f9f6 	bl	800148a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800109e:	bf00      	nop
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800

080010ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <NMI_Handler+0x4>

080010b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <HardFault_Handler+0x4>

080010bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <MemManage_Handler+0x4>

080010c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <BusFault_Handler+0x4>

080010cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <UsageFault_Handler+0x4>

080010d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001102:	f000 f8ab 	bl	800125c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001110:	4802      	ldr	r0, [pc, #8]	@ (800111c <TIM2_IRQHandler+0x10>)
 8001112:	f001 f890 	bl	8002236 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200000b0 	.word	0x200000b0

08001120 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_PLAYER2_Pin);
 8001124:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001128:	f000 fb68 	bl	80017fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_PLAYER1_Pin);
 800112c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001130:	f000 fb64 	bl	80017fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_MATCH_RESET_Pin);
 8001134:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001138:	f000 fb60 	bl	80017fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}

08001140 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001144:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <SystemInit+0x20>)
 8001146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800114a:	4a05      	ldr	r2, [pc, #20]	@ (8001160 <SystemInit+0x20>)
 800114c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001150:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001164:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800119c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001168:	f7ff ffea 	bl	8001140 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800116c:	480c      	ldr	r0, [pc, #48]	@ (80011a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800116e:	490d      	ldr	r1, [pc, #52]	@ (80011a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001170:	4a0d      	ldr	r2, [pc, #52]	@ (80011a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001174:	e002      	b.n	800117c <LoopCopyDataInit>

08001176 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001176:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001178:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117a:	3304      	adds	r3, #4

0800117c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800117c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001180:	d3f9      	bcc.n	8001176 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001182:	4a0a      	ldr	r2, [pc, #40]	@ (80011ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001184:	4c0a      	ldr	r4, [pc, #40]	@ (80011b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001188:	e001      	b.n	800118e <LoopFillZerobss>

0800118a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800118c:	3204      	adds	r2, #4

0800118e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001190:	d3fb      	bcc.n	800118a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001192:	f001 fbdf 	bl	8002954 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001196:	f7ff fdf9 	bl	8000d8c <main>
  bx  lr    
 800119a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800119c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011a8:	080029e8 	.word	0x080029e8
  ldr r2, =_sbss
 80011ac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011b0:	200000fc 	.word	0x200000fc

080011b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011b4:	e7fe      	b.n	80011b4 <ADC_IRQHandler>
	...

080011b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011bc:	4b0e      	ldr	r3, [pc, #56]	@ (80011f8 <HAL_Init+0x40>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a0d      	ldr	r2, [pc, #52]	@ (80011f8 <HAL_Init+0x40>)
 80011c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011c8:	4b0b      	ldr	r3, [pc, #44]	@ (80011f8 <HAL_Init+0x40>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a0a      	ldr	r2, [pc, #40]	@ (80011f8 <HAL_Init+0x40>)
 80011ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d4:	4b08      	ldr	r3, [pc, #32]	@ (80011f8 <HAL_Init+0x40>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a07      	ldr	r2, [pc, #28]	@ (80011f8 <HAL_Init+0x40>)
 80011da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e0:	2003      	movs	r0, #3
 80011e2:	f000 f92b 	bl	800143c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011e6:	200f      	movs	r0, #15
 80011e8:	f000 f808 	bl	80011fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011ec:	f7ff ff10 	bl	8001010 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40023c00 	.word	0x40023c00

080011fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001204:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <HAL_InitTick+0x54>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4b12      	ldr	r3, [pc, #72]	@ (8001254 <HAL_InitTick+0x58>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4619      	mov	r1, r3
 800120e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001212:	fbb3 f3f1 	udiv	r3, r3, r1
 8001216:	fbb2 f3f3 	udiv	r3, r2, r3
 800121a:	4618      	mov	r0, r3
 800121c:	f000 f943 	bl	80014a6 <HAL_SYSTICK_Config>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e00e      	b.n	8001248 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b0f      	cmp	r3, #15
 800122e:	d80a      	bhi.n	8001246 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001230:	2200      	movs	r2, #0
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001238:	f000 f90b 	bl	8001452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800123c:	4a06      	ldr	r2, [pc, #24]	@ (8001258 <HAL_InitTick+0x5c>)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001242:	2300      	movs	r3, #0
 8001244:	e000      	b.n	8001248 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
}
 8001248:	4618      	mov	r0, r3
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000000 	.word	0x20000000
 8001254:	20000008 	.word	0x20000008
 8001258:	20000004 	.word	0x20000004

0800125c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001260:	4b06      	ldr	r3, [pc, #24]	@ (800127c <HAL_IncTick+0x20>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	461a      	mov	r2, r3
 8001266:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <HAL_IncTick+0x24>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4413      	add	r3, r2
 800126c:	4a04      	ldr	r2, [pc, #16]	@ (8001280 <HAL_IncTick+0x24>)
 800126e:	6013      	str	r3, [r2, #0]
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	20000008 	.word	0x20000008
 8001280:	200000f8 	.word	0x200000f8

08001284 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return uwTick;
 8001288:	4b03      	ldr	r3, [pc, #12]	@ (8001298 <HAL_GetTick+0x14>)
 800128a:	681b      	ldr	r3, [r3, #0]
}
 800128c:	4618      	mov	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	200000f8 	.word	0x200000f8

0800129c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ac:	4b0c      	ldr	r3, [pc, #48]	@ (80012e0 <__NVIC_SetPriorityGrouping+0x44>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012b8:	4013      	ands	r3, r2
 80012ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ce:	4a04      	ldr	r2, [pc, #16]	@ (80012e0 <__NVIC_SetPriorityGrouping+0x44>)
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	60d3      	str	r3, [r2, #12]
}
 80012d4:	bf00      	nop
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e8:	4b04      	ldr	r3, [pc, #16]	@ (80012fc <__NVIC_GetPriorityGrouping+0x18>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	0a1b      	lsrs	r3, r3, #8
 80012ee:	f003 0307 	and.w	r3, r3, #7
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	2b00      	cmp	r3, #0
 8001310:	db0b      	blt.n	800132a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	f003 021f 	and.w	r2, r3, #31
 8001318:	4907      	ldr	r1, [pc, #28]	@ (8001338 <__NVIC_EnableIRQ+0x38>)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	095b      	lsrs	r3, r3, #5
 8001320:	2001      	movs	r0, #1
 8001322:	fa00 f202 	lsl.w	r2, r0, r2
 8001326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000e100 	.word	0xe000e100

0800133c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	6039      	str	r1, [r7, #0]
 8001346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134c:	2b00      	cmp	r3, #0
 800134e:	db0a      	blt.n	8001366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	b2da      	uxtb	r2, r3
 8001354:	490c      	ldr	r1, [pc, #48]	@ (8001388 <__NVIC_SetPriority+0x4c>)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	0112      	lsls	r2, r2, #4
 800135c:	b2d2      	uxtb	r2, r2
 800135e:	440b      	add	r3, r1
 8001360:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001364:	e00a      	b.n	800137c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	b2da      	uxtb	r2, r3
 800136a:	4908      	ldr	r1, [pc, #32]	@ (800138c <__NVIC_SetPriority+0x50>)
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	3b04      	subs	r3, #4
 8001374:	0112      	lsls	r2, r2, #4
 8001376:	b2d2      	uxtb	r2, r2
 8001378:	440b      	add	r3, r1
 800137a:	761a      	strb	r2, [r3, #24]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000e100 	.word	0xe000e100
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001390:	b480      	push	{r7}
 8001392:	b089      	sub	sp, #36	@ 0x24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f1c3 0307 	rsb	r3, r3, #7
 80013aa:	2b04      	cmp	r3, #4
 80013ac:	bf28      	it	cs
 80013ae:	2304      	movcs	r3, #4
 80013b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3304      	adds	r3, #4
 80013b6:	2b06      	cmp	r3, #6
 80013b8:	d902      	bls.n	80013c0 <NVIC_EncodePriority+0x30>
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3b03      	subs	r3, #3
 80013be:	e000      	b.n	80013c2 <NVIC_EncodePriority+0x32>
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43da      	mvns	r2, r3
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	401a      	ands	r2, r3
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	fa01 f303 	lsl.w	r3, r1, r3
 80013e2:	43d9      	mvns	r1, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	4313      	orrs	r3, r2
         );
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3724      	adds	r7, #36	@ 0x24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3b01      	subs	r3, #1
 8001404:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001408:	d301      	bcc.n	800140e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800140a:	2301      	movs	r3, #1
 800140c:	e00f      	b.n	800142e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140e:	4a0a      	ldr	r2, [pc, #40]	@ (8001438 <SysTick_Config+0x40>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3b01      	subs	r3, #1
 8001414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001416:	210f      	movs	r1, #15
 8001418:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800141c:	f7ff ff8e 	bl	800133c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001420:	4b05      	ldr	r3, [pc, #20]	@ (8001438 <SysTick_Config+0x40>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001426:	4b04      	ldr	r3, [pc, #16]	@ (8001438 <SysTick_Config+0x40>)
 8001428:	2207      	movs	r2, #7
 800142a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	e000e010 	.word	0xe000e010

0800143c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ff29 	bl	800129c <__NVIC_SetPriorityGrouping>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001452:	b580      	push	{r7, lr}
 8001454:	b086      	sub	sp, #24
 8001456:	af00      	add	r7, sp, #0
 8001458:	4603      	mov	r3, r0
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	607a      	str	r2, [r7, #4]
 800145e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001464:	f7ff ff3e 	bl	80012e4 <__NVIC_GetPriorityGrouping>
 8001468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	6978      	ldr	r0, [r7, #20]
 8001470:	f7ff ff8e 	bl	8001390 <NVIC_EncodePriority>
 8001474:	4602      	mov	r2, r0
 8001476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147a:	4611      	mov	r1, r2
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff5d 	bl	800133c <__NVIC_SetPriority>
}
 8001482:	bf00      	nop
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	4603      	mov	r3, r0
 8001492:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff31 	bl	8001300 <__NVIC_EnableIRQ>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff ffa2 	bl	80013f8 <SysTick_Config>
 80014b4:	4603      	mov	r3, r0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b089      	sub	sp, #36	@ 0x24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
 80014da:	e159      	b.n	8001790 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014dc:	2201      	movs	r2, #1
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	4013      	ands	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	f040 8148 	bne.w	800178a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f003 0303 	and.w	r3, r3, #3
 8001502:	2b01      	cmp	r3, #1
 8001504:	d005      	beq.n	8001512 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800150e:	2b02      	cmp	r3, #2
 8001510:	d130      	bne.n	8001574 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	2203      	movs	r2, #3
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4013      	ands	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4313      	orrs	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001548:	2201      	movs	r2, #1
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	43db      	mvns	r3, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	091b      	lsrs	r3, r3, #4
 800155e:	f003 0201 	and.w	r2, r3, #1
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4313      	orrs	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0303 	and.w	r3, r3, #3
 800157c:	2b03      	cmp	r3, #3
 800157e:	d017      	beq.n	80015b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	2203      	movs	r2, #3
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4013      	ands	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 0303 	and.w	r3, r3, #3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d123      	bne.n	8001604 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	08da      	lsrs	r2, r3, #3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3208      	adds	r2, #8
 80015c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	f003 0307 	and.w	r3, r3, #7
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	220f      	movs	r2, #15
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	691a      	ldr	r2, [r3, #16]
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	08da      	lsrs	r2, r3, #3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	3208      	adds	r2, #8
 80015fe:	69b9      	ldr	r1, [r7, #24]
 8001600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	2203      	movs	r2, #3
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 0203 	and.w	r2, r3, #3
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001640:	2b00      	cmp	r3, #0
 8001642:	f000 80a2 	beq.w	800178a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	4b57      	ldr	r3, [pc, #348]	@ (80017a8 <HAL_GPIO_Init+0x2e8>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164e:	4a56      	ldr	r2, [pc, #344]	@ (80017a8 <HAL_GPIO_Init+0x2e8>)
 8001650:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001654:	6453      	str	r3, [r2, #68]	@ 0x44
 8001656:	4b54      	ldr	r3, [pc, #336]	@ (80017a8 <HAL_GPIO_Init+0x2e8>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800165a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001662:	4a52      	ldr	r2, [pc, #328]	@ (80017ac <HAL_GPIO_Init+0x2ec>)
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	089b      	lsrs	r3, r3, #2
 8001668:	3302      	adds	r3, #2
 800166a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f003 0303 	and.w	r3, r3, #3
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	220f      	movs	r2, #15
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4013      	ands	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a49      	ldr	r2, [pc, #292]	@ (80017b0 <HAL_GPIO_Init+0x2f0>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d019      	beq.n	80016c2 <HAL_GPIO_Init+0x202>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a48      	ldr	r2, [pc, #288]	@ (80017b4 <HAL_GPIO_Init+0x2f4>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d013      	beq.n	80016be <HAL_GPIO_Init+0x1fe>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a47      	ldr	r2, [pc, #284]	@ (80017b8 <HAL_GPIO_Init+0x2f8>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d00d      	beq.n	80016ba <HAL_GPIO_Init+0x1fa>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a46      	ldr	r2, [pc, #280]	@ (80017bc <HAL_GPIO_Init+0x2fc>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d007      	beq.n	80016b6 <HAL_GPIO_Init+0x1f6>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a45      	ldr	r2, [pc, #276]	@ (80017c0 <HAL_GPIO_Init+0x300>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d101      	bne.n	80016b2 <HAL_GPIO_Init+0x1f2>
 80016ae:	2304      	movs	r3, #4
 80016b0:	e008      	b.n	80016c4 <HAL_GPIO_Init+0x204>
 80016b2:	2307      	movs	r3, #7
 80016b4:	e006      	b.n	80016c4 <HAL_GPIO_Init+0x204>
 80016b6:	2303      	movs	r3, #3
 80016b8:	e004      	b.n	80016c4 <HAL_GPIO_Init+0x204>
 80016ba:	2302      	movs	r3, #2
 80016bc:	e002      	b.n	80016c4 <HAL_GPIO_Init+0x204>
 80016be:	2301      	movs	r3, #1
 80016c0:	e000      	b.n	80016c4 <HAL_GPIO_Init+0x204>
 80016c2:	2300      	movs	r3, #0
 80016c4:	69fa      	ldr	r2, [r7, #28]
 80016c6:	f002 0203 	and.w	r2, r2, #3
 80016ca:	0092      	lsls	r2, r2, #2
 80016cc:	4093      	lsls	r3, r2
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016d4:	4935      	ldr	r1, [pc, #212]	@ (80017ac <HAL_GPIO_Init+0x2ec>)
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	089b      	lsrs	r3, r3, #2
 80016da:	3302      	adds	r3, #2
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016e2:	4b38      	ldr	r3, [pc, #224]	@ (80017c4 <HAL_GPIO_Init+0x304>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	43db      	mvns	r3, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4013      	ands	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	4313      	orrs	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001706:	4a2f      	ldr	r2, [pc, #188]	@ (80017c4 <HAL_GPIO_Init+0x304>)
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800170c:	4b2d      	ldr	r3, [pc, #180]	@ (80017c4 <HAL_GPIO_Init+0x304>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	43db      	mvns	r3, r3
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4013      	ands	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d003      	beq.n	8001730 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001730:	4a24      	ldr	r2, [pc, #144]	@ (80017c4 <HAL_GPIO_Init+0x304>)
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001736:	4b23      	ldr	r3, [pc, #140]	@ (80017c4 <HAL_GPIO_Init+0x304>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	43db      	mvns	r3, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4013      	ands	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	4313      	orrs	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800175a:	4a1a      	ldr	r2, [pc, #104]	@ (80017c4 <HAL_GPIO_Init+0x304>)
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001760:	4b18      	ldr	r3, [pc, #96]	@ (80017c4 <HAL_GPIO_Init+0x304>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	43db      	mvns	r3, r3
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4013      	ands	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d003      	beq.n	8001784 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	4313      	orrs	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001784:	4a0f      	ldr	r2, [pc, #60]	@ (80017c4 <HAL_GPIO_Init+0x304>)
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3301      	adds	r3, #1
 800178e:	61fb      	str	r3, [r7, #28]
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	2b0f      	cmp	r3, #15
 8001794:	f67f aea2 	bls.w	80014dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001798:	bf00      	nop
 800179a:	bf00      	nop
 800179c:	3724      	adds	r7, #36	@ 0x24
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40013800 	.word	0x40013800
 80017b0:	40020000 	.word	0x40020000
 80017b4:	40020400 	.word	0x40020400
 80017b8:	40020800 	.word	0x40020800
 80017bc:	40020c00 	.word	0x40020c00
 80017c0:	40021000 	.word	0x40021000
 80017c4:	40013c00 	.word	0x40013c00

080017c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	460b      	mov	r3, r1
 80017d2:	807b      	strh	r3, [r7, #2]
 80017d4:	4613      	mov	r3, r2
 80017d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017d8:	787b      	ldrb	r3, [r7, #1]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017de:	887a      	ldrh	r2, [r7, #2]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017e4:	e003      	b.n	80017ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017e6:	887b      	ldrh	r3, [r7, #2]
 80017e8:	041a      	lsls	r2, r3, #16
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	619a      	str	r2, [r3, #24]
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001806:	4b08      	ldr	r3, [pc, #32]	@ (8001828 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001808:	695a      	ldr	r2, [r3, #20]
 800180a:	88fb      	ldrh	r3, [r7, #6]
 800180c:	4013      	ands	r3, r2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d006      	beq.n	8001820 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001812:	4a05      	ldr	r2, [pc, #20]	@ (8001828 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001814:	88fb      	ldrh	r3, [r7, #6]
 8001816:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001818:	88fb      	ldrh	r3, [r7, #6]
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe feee 	bl	80005fc <HAL_GPIO_EXTI_Callback>
  }
}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40013c00 	.word	0x40013c00

0800182c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e267      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d075      	beq.n	8001936 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800184a:	4b88      	ldr	r3, [pc, #544]	@ (8001a6c <HAL_RCC_OscConfig+0x240>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 030c 	and.w	r3, r3, #12
 8001852:	2b04      	cmp	r3, #4
 8001854:	d00c      	beq.n	8001870 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001856:	4b85      	ldr	r3, [pc, #532]	@ (8001a6c <HAL_RCC_OscConfig+0x240>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800185e:	2b08      	cmp	r3, #8
 8001860:	d112      	bne.n	8001888 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001862:	4b82      	ldr	r3, [pc, #520]	@ (8001a6c <HAL_RCC_OscConfig+0x240>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800186a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800186e:	d10b      	bne.n	8001888 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001870:	4b7e      	ldr	r3, [pc, #504]	@ (8001a6c <HAL_RCC_OscConfig+0x240>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d05b      	beq.n	8001934 <HAL_RCC_OscConfig+0x108>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d157      	bne.n	8001934 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e242      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001890:	d106      	bne.n	80018a0 <HAL_RCC_OscConfig+0x74>
 8001892:	4b76      	ldr	r3, [pc, #472]	@ (8001a6c <HAL_RCC_OscConfig+0x240>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a75      	ldr	r2, [pc, #468]	@ (8001a6c <HAL_RCC_OscConfig+0x240>)
 8001898:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	e01d      	b.n	80018dc <HAL_RCC_OscConfig+0xb0>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018a8:	d10c      	bne.n	80018c4 <HAL_RCC_OscConfig+0x98>
 80018aa:	4b70      	ldr	r3, [pc, #448]	@ (8001a6c <HAL_RCC_OscConfig+0x240>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a6f      	ldr	r2, [pc, #444]	@ (8001a6c <HAL_RCC_OscConfig+0x240>)
 80018b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	4b6d      	ldr	r3, [pc, #436]	@ (8001a6c <HAL_RCC_OscConfig+0x240>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a6c      	ldr	r2, [pc, #432]	@ (8001a6c <HAL_RCC_OscConfig+0x240>)
 80018bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	e00b      	b.n	80018dc <HAL_RCC_OscConfig+0xb0>
 80018c4:	4b69      	ldr	r3, [pc, #420]	@ (8001a6c <HAL_RCC_OscConfig+0x240>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a68      	ldr	r2, [pc, #416]	@ (8001a6c <HAL_RCC_OscConfig+0x240>)
 80018ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	4b66      	ldr	r3, [pc, #408]	@ (8001a6c <HAL_RCC_OscConfig+0x240>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a65      	ldr	r2, [pc, #404]	@ (8001a6c <HAL_RCC_OscConfig+0x240>)
 80018d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d013      	beq.n	800190c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e4:	f7ff fcce 	bl	8001284 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018ec:	f7ff fcca 	bl	8001284 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b64      	cmp	r3, #100	@ 0x64
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e207      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fe:	4b5b      	ldr	r3, [pc, #364]	@ (8001a6c <HAL_RCC_OscConfig+0x240>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d0f0      	beq.n	80018ec <HAL_RCC_OscConfig+0xc0>
 800190a:	e014      	b.n	8001936 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190c:	f7ff fcba 	bl	8001284 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001914:	f7ff fcb6 	bl	8001284 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b64      	cmp	r3, #100	@ 0x64
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e1f3      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001926:	4b51      	ldr	r3, [pc, #324]	@ (8001a6c <HAL_RCC_OscConfig+0x240>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1f0      	bne.n	8001914 <HAL_RCC_OscConfig+0xe8>
 8001932:	e000      	b.n	8001936 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d063      	beq.n	8001a0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001942:	4b4a      	ldr	r3, [pc, #296]	@ (8001a6c <HAL_RCC_OscConfig+0x240>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f003 030c 	and.w	r3, r3, #12
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00b      	beq.n	8001966 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800194e:	4b47      	ldr	r3, [pc, #284]	@ (8001a6c <HAL_RCC_OscConfig+0x240>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001956:	2b08      	cmp	r3, #8
 8001958:	d11c      	bne.n	8001994 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800195a:	4b44      	ldr	r3, [pc, #272]	@ (8001a6c <HAL_RCC_OscConfig+0x240>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d116      	bne.n	8001994 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001966:	4b41      	ldr	r3, [pc, #260]	@ (8001a6c <HAL_RCC_OscConfig+0x240>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d005      	beq.n	800197e <HAL_RCC_OscConfig+0x152>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d001      	beq.n	800197e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e1c7      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a6c <HAL_RCC_OscConfig+0x240>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	4937      	ldr	r1, [pc, #220]	@ (8001a6c <HAL_RCC_OscConfig+0x240>)
 800198e:	4313      	orrs	r3, r2
 8001990:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001992:	e03a      	b.n	8001a0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d020      	beq.n	80019de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800199c:	4b34      	ldr	r3, [pc, #208]	@ (8001a70 <HAL_RCC_OscConfig+0x244>)
 800199e:	2201      	movs	r2, #1
 80019a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a2:	f7ff fc6f 	bl	8001284 <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019aa:	f7ff fc6b 	bl	8001284 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e1a8      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019bc:	4b2b      	ldr	r3, [pc, #172]	@ (8001a6c <HAL_RCC_OscConfig+0x240>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0f0      	beq.n	80019aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c8:	4b28      	ldr	r3, [pc, #160]	@ (8001a6c <HAL_RCC_OscConfig+0x240>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	4925      	ldr	r1, [pc, #148]	@ (8001a6c <HAL_RCC_OscConfig+0x240>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	600b      	str	r3, [r1, #0]
 80019dc:	e015      	b.n	8001a0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019de:	4b24      	ldr	r3, [pc, #144]	@ (8001a70 <HAL_RCC_OscConfig+0x244>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e4:	f7ff fc4e 	bl	8001284 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ec:	f7ff fc4a 	bl	8001284 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e187      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fe:	4b1b      	ldr	r3, [pc, #108]	@ (8001a6c <HAL_RCC_OscConfig+0x240>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d036      	beq.n	8001a84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d016      	beq.n	8001a4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a1e:	4b15      	ldr	r3, [pc, #84]	@ (8001a74 <HAL_RCC_OscConfig+0x248>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a24:	f7ff fc2e 	bl	8001284 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a2c:	f7ff fc2a 	bl	8001284 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e167      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a6c <HAL_RCC_OscConfig+0x240>)
 8001a40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0f0      	beq.n	8001a2c <HAL_RCC_OscConfig+0x200>
 8001a4a:	e01b      	b.n	8001a84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a4c:	4b09      	ldr	r3, [pc, #36]	@ (8001a74 <HAL_RCC_OscConfig+0x248>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a52:	f7ff fc17 	bl	8001284 <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a58:	e00e      	b.n	8001a78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a5a:	f7ff fc13 	bl	8001284 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d907      	bls.n	8001a78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e150      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	42470000 	.word	0x42470000
 8001a74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a78:	4b88      	ldr	r3, [pc, #544]	@ (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001a7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1ea      	bne.n	8001a5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 8097 	beq.w	8001bc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a92:	2300      	movs	r3, #0
 8001a94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a96:	4b81      	ldr	r3, [pc, #516]	@ (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d10f      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	4b7d      	ldr	r3, [pc, #500]	@ (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aaa:	4a7c      	ldr	r2, [pc, #496]	@ (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001aac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ab0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ab2:	4b7a      	ldr	r3, [pc, #488]	@ (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac2:	4b77      	ldr	r3, [pc, #476]	@ (8001ca0 <HAL_RCC_OscConfig+0x474>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d118      	bne.n	8001b00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ace:	4b74      	ldr	r3, [pc, #464]	@ (8001ca0 <HAL_RCC_OscConfig+0x474>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a73      	ldr	r2, [pc, #460]	@ (8001ca0 <HAL_RCC_OscConfig+0x474>)
 8001ad4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ad8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ada:	f7ff fbd3 	bl	8001284 <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae2:	f7ff fbcf 	bl	8001284 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e10c      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af4:	4b6a      	ldr	r3, [pc, #424]	@ (8001ca0 <HAL_RCC_OscConfig+0x474>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0f0      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d106      	bne.n	8001b16 <HAL_RCC_OscConfig+0x2ea>
 8001b08:	4b64      	ldr	r3, [pc, #400]	@ (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001b0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b0c:	4a63      	ldr	r2, [pc, #396]	@ (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b14:	e01c      	b.n	8001b50 <HAL_RCC_OscConfig+0x324>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	2b05      	cmp	r3, #5
 8001b1c:	d10c      	bne.n	8001b38 <HAL_RCC_OscConfig+0x30c>
 8001b1e:	4b5f      	ldr	r3, [pc, #380]	@ (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b22:	4a5e      	ldr	r2, [pc, #376]	@ (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001b24:	f043 0304 	orr.w	r3, r3, #4
 8001b28:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b2a:	4b5c      	ldr	r3, [pc, #368]	@ (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b2e:	4a5b      	ldr	r2, [pc, #364]	@ (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b36:	e00b      	b.n	8001b50 <HAL_RCC_OscConfig+0x324>
 8001b38:	4b58      	ldr	r3, [pc, #352]	@ (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b3c:	4a57      	ldr	r2, [pc, #348]	@ (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001b3e:	f023 0301 	bic.w	r3, r3, #1
 8001b42:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b44:	4b55      	ldr	r3, [pc, #340]	@ (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b48:	4a54      	ldr	r2, [pc, #336]	@ (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001b4a:	f023 0304 	bic.w	r3, r3, #4
 8001b4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d015      	beq.n	8001b84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b58:	f7ff fb94 	bl	8001284 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b5e:	e00a      	b.n	8001b76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b60:	f7ff fb90 	bl	8001284 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e0cb      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b76:	4b49      	ldr	r3, [pc, #292]	@ (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0ee      	beq.n	8001b60 <HAL_RCC_OscConfig+0x334>
 8001b82:	e014      	b.n	8001bae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b84:	f7ff fb7e 	bl	8001284 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b8a:	e00a      	b.n	8001ba2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b8c:	f7ff fb7a 	bl	8001284 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e0b5      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba2:	4b3e      	ldr	r3, [pc, #248]	@ (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1ee      	bne.n	8001b8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bae:	7dfb      	ldrb	r3, [r7, #23]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d105      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bb4:	4b39      	ldr	r3, [pc, #228]	@ (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb8:	4a38      	ldr	r2, [pc, #224]	@ (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001bba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bbe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 80a1 	beq.w	8001d0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bca:	4b34      	ldr	r3, [pc, #208]	@ (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 030c 	and.w	r3, r3, #12
 8001bd2:	2b08      	cmp	r3, #8
 8001bd4:	d05c      	beq.n	8001c90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d141      	bne.n	8001c62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bde:	4b31      	ldr	r3, [pc, #196]	@ (8001ca4 <HAL_RCC_OscConfig+0x478>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be4:	f7ff fb4e 	bl	8001284 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bec:	f7ff fb4a 	bl	8001284 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e087      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bfe:	4b27      	ldr	r3, [pc, #156]	@ (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f0      	bne.n	8001bec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69da      	ldr	r2, [r3, #28]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c18:	019b      	lsls	r3, r3, #6
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c20:	085b      	lsrs	r3, r3, #1
 8001c22:	3b01      	subs	r3, #1
 8001c24:	041b      	lsls	r3, r3, #16
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c2c:	061b      	lsls	r3, r3, #24
 8001c2e:	491b      	ldr	r1, [pc, #108]	@ (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c34:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca4 <HAL_RCC_OscConfig+0x478>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3a:	f7ff fb23 	bl	8001284 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c42:	f7ff fb1f 	bl	8001284 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e05c      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c54:	4b11      	ldr	r3, [pc, #68]	@ (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x416>
 8001c60:	e054      	b.n	8001d0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c62:	4b10      	ldr	r3, [pc, #64]	@ (8001ca4 <HAL_RCC_OscConfig+0x478>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c68:	f7ff fb0c 	bl	8001284 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c70:	f7ff fb08 	bl	8001284 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e045      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c82:	4b06      	ldr	r3, [pc, #24]	@ (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f0      	bne.n	8001c70 <HAL_RCC_OscConfig+0x444>
 8001c8e:	e03d      	b.n	8001d0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d107      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e038      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40007000 	.word	0x40007000
 8001ca4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d18 <HAL_RCC_OscConfig+0x4ec>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d028      	beq.n	8001d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d121      	bne.n	8001d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d11a      	bne.n	8001d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001cd8:	4013      	ands	r3, r2
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001cde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d111      	bne.n	8001d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cee:	085b      	lsrs	r3, r3, #1
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d107      	bne.n	8001d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d001      	beq.n	8001d0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e000      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40023800 	.word	0x40023800

08001d1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e0cc      	b.n	8001eca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d30:	4b68      	ldr	r3, [pc, #416]	@ (8001ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d90c      	bls.n	8001d58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3e:	4b65      	ldr	r3, [pc, #404]	@ (8001ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d46:	4b63      	ldr	r3, [pc, #396]	@ (8001ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d001      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e0b8      	b.n	8001eca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d020      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d005      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d70:	4b59      	ldr	r3, [pc, #356]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	4a58      	ldr	r2, [pc, #352]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0308 	and.w	r3, r3, #8
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d005      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d88:	4b53      	ldr	r3, [pc, #332]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	4a52      	ldr	r2, [pc, #328]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d94:	4b50      	ldr	r3, [pc, #320]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	494d      	ldr	r1, [pc, #308]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d044      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d107      	bne.n	8001dca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dba:	4b47      	ldr	r3, [pc, #284]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d119      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e07f      	b.n	8001eca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d003      	beq.n	8001dda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	d107      	bne.n	8001dea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dda:	4b3f      	ldr	r3, [pc, #252]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d109      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e06f      	b.n	8001eca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dea:	4b3b      	ldr	r3, [pc, #236]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e067      	b.n	8001eca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dfa:	4b37      	ldr	r3, [pc, #220]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f023 0203 	bic.w	r2, r3, #3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	4934      	ldr	r1, [pc, #208]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e0c:	f7ff fa3a 	bl	8001284 <HAL_GetTick>
 8001e10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e12:	e00a      	b.n	8001e2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e14:	f7ff fa36 	bl	8001284 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e04f      	b.n	8001eca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2a:	4b2b      	ldr	r3, [pc, #172]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 020c 	and.w	r2, r3, #12
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d1eb      	bne.n	8001e14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e3c:	4b25      	ldr	r3, [pc, #148]	@ (8001ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d20c      	bcs.n	8001e64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4a:	4b22      	ldr	r3, [pc, #136]	@ (8001ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e52:	4b20      	ldr	r3, [pc, #128]	@ (8001ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d001      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e032      	b.n	8001eca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d008      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e70:	4b19      	ldr	r3, [pc, #100]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	4916      	ldr	r1, [pc, #88]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d009      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e8e:	4b12      	ldr	r3, [pc, #72]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	490e      	ldr	r1, [pc, #56]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ea2:	f000 f821 	bl	8001ee8 <HAL_RCC_GetSysClockFreq>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	091b      	lsrs	r3, r3, #4
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	490a      	ldr	r1, [pc, #40]	@ (8001edc <HAL_RCC_ClockConfig+0x1c0>)
 8001eb4:	5ccb      	ldrb	r3, [r1, r3]
 8001eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eba:	4a09      	ldr	r2, [pc, #36]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ebe:	4b09      	ldr	r3, [pc, #36]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff f99a 	bl	80011fc <HAL_InitTick>

  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40023c00 	.word	0x40023c00
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	080029c8 	.word	0x080029c8
 8001ee0:	20000000 	.word	0x20000000
 8001ee4:	20000004 	.word	0x20000004

08001ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001eec:	b090      	sub	sp, #64	@ 0x40
 8001eee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ef8:	2300      	movs	r3, #0
 8001efa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f00:	4b59      	ldr	r3, [pc, #356]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 030c 	and.w	r3, r3, #12
 8001f08:	2b08      	cmp	r3, #8
 8001f0a:	d00d      	beq.n	8001f28 <HAL_RCC_GetSysClockFreq+0x40>
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	f200 80a1 	bhi.w	8002054 <HAL_RCC_GetSysClockFreq+0x16c>
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d002      	beq.n	8001f1c <HAL_RCC_GetSysClockFreq+0x34>
 8001f16:	2b04      	cmp	r3, #4
 8001f18:	d003      	beq.n	8001f22 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f1a:	e09b      	b.n	8002054 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f1c:	4b53      	ldr	r3, [pc, #332]	@ (800206c <HAL_RCC_GetSysClockFreq+0x184>)
 8001f1e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8001f20:	e09b      	b.n	800205a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f22:	4b53      	ldr	r3, [pc, #332]	@ (8002070 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f24:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f26:	e098      	b.n	800205a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f28:	4b4f      	ldr	r3, [pc, #316]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f30:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f32:	4b4d      	ldr	r3, [pc, #308]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d028      	beq.n	8001f90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f3e:	4b4a      	ldr	r3, [pc, #296]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	099b      	lsrs	r3, r3, #6
 8001f44:	2200      	movs	r2, #0
 8001f46:	623b      	str	r3, [r7, #32]
 8001f48:	627a      	str	r2, [r7, #36]	@ 0x24
 8001f4a:	6a3b      	ldr	r3, [r7, #32]
 8001f4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001f50:	2100      	movs	r1, #0
 8001f52:	4b47      	ldr	r3, [pc, #284]	@ (8002070 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f54:	fb03 f201 	mul.w	r2, r3, r1
 8001f58:	2300      	movs	r3, #0
 8001f5a:	fb00 f303 	mul.w	r3, r0, r3
 8001f5e:	4413      	add	r3, r2
 8001f60:	4a43      	ldr	r2, [pc, #268]	@ (8002070 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f62:	fba0 1202 	umull	r1, r2, r0, r2
 8001f66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f68:	460a      	mov	r2, r1
 8001f6a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001f6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f6e:	4413      	add	r3, r2
 8001f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f74:	2200      	movs	r2, #0
 8001f76:	61bb      	str	r3, [r7, #24]
 8001f78:	61fa      	str	r2, [r7, #28]
 8001f7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001f82:	f7fe f929 	bl	80001d8 <__aeabi_uldivmod>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f8e:	e053      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f90:	4b35      	ldr	r3, [pc, #212]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	099b      	lsrs	r3, r3, #6
 8001f96:	2200      	movs	r2, #0
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	617a      	str	r2, [r7, #20]
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001fa2:	f04f 0b00 	mov.w	fp, #0
 8001fa6:	4652      	mov	r2, sl
 8001fa8:	465b      	mov	r3, fp
 8001faa:	f04f 0000 	mov.w	r0, #0
 8001fae:	f04f 0100 	mov.w	r1, #0
 8001fb2:	0159      	lsls	r1, r3, #5
 8001fb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fb8:	0150      	lsls	r0, r2, #5
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	ebb2 080a 	subs.w	r8, r2, sl
 8001fc2:	eb63 090b 	sbc.w	r9, r3, fp
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	f04f 0300 	mov.w	r3, #0
 8001fce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001fd2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001fd6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001fda:	ebb2 0408 	subs.w	r4, r2, r8
 8001fde:	eb63 0509 	sbc.w	r5, r3, r9
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	f04f 0300 	mov.w	r3, #0
 8001fea:	00eb      	lsls	r3, r5, #3
 8001fec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ff0:	00e2      	lsls	r2, r4, #3
 8001ff2:	4614      	mov	r4, r2
 8001ff4:	461d      	mov	r5, r3
 8001ff6:	eb14 030a 	adds.w	r3, r4, sl
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	eb45 030b 	adc.w	r3, r5, fp
 8002000:	607b      	str	r3, [r7, #4]
 8002002:	f04f 0200 	mov.w	r2, #0
 8002006:	f04f 0300 	mov.w	r3, #0
 800200a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800200e:	4629      	mov	r1, r5
 8002010:	028b      	lsls	r3, r1, #10
 8002012:	4621      	mov	r1, r4
 8002014:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002018:	4621      	mov	r1, r4
 800201a:	028a      	lsls	r2, r1, #10
 800201c:	4610      	mov	r0, r2
 800201e:	4619      	mov	r1, r3
 8002020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002022:	2200      	movs	r2, #0
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	60fa      	str	r2, [r7, #12]
 8002028:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800202c:	f7fe f8d4 	bl	80001d8 <__aeabi_uldivmod>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4613      	mov	r3, r2
 8002036:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002038:	4b0b      	ldr	r3, [pc, #44]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x180>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	0c1b      	lsrs	r3, r3, #16
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	3301      	adds	r3, #1
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002048:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800204a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800204c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002050:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002052:	e002      	b.n	800205a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002054:	4b05      	ldr	r3, [pc, #20]	@ (800206c <HAL_RCC_GetSysClockFreq+0x184>)
 8002056:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002058:	bf00      	nop
    }
  }
  return sysclockfreq;
 800205a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800205c:	4618      	mov	r0, r3
 800205e:	3740      	adds	r7, #64	@ 0x40
 8002060:	46bd      	mov	sp, r7
 8002062:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002066:	bf00      	nop
 8002068:	40023800 	.word	0x40023800
 800206c:	00f42400 	.word	0x00f42400
 8002070:	017d7840 	.word	0x017d7840

08002074 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e041      	b.n	800210a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d106      	bne.n	80020a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7fe ffe0 	bl	8001060 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2202      	movs	r2, #2
 80020a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3304      	adds	r3, #4
 80020b0:	4619      	mov	r1, r3
 80020b2:	4610      	mov	r0, r2
 80020b4:	f000 fa9e 	bl	80025f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b01      	cmp	r3, #1
 8002126:	d001      	beq.n	800212c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e044      	b.n	80021b6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2202      	movs	r2, #2
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 0201 	orr.w	r2, r2, #1
 8002142:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a1e      	ldr	r2, [pc, #120]	@ (80021c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d018      	beq.n	8002180 <HAL_TIM_Base_Start_IT+0x6c>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002156:	d013      	beq.n	8002180 <HAL_TIM_Base_Start_IT+0x6c>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a1a      	ldr	r2, [pc, #104]	@ (80021c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d00e      	beq.n	8002180 <HAL_TIM_Base_Start_IT+0x6c>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a19      	ldr	r2, [pc, #100]	@ (80021cc <HAL_TIM_Base_Start_IT+0xb8>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d009      	beq.n	8002180 <HAL_TIM_Base_Start_IT+0x6c>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a17      	ldr	r2, [pc, #92]	@ (80021d0 <HAL_TIM_Base_Start_IT+0xbc>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d004      	beq.n	8002180 <HAL_TIM_Base_Start_IT+0x6c>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a16      	ldr	r2, [pc, #88]	@ (80021d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d111      	bne.n	80021a4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2b06      	cmp	r3, #6
 8002190:	d010      	beq.n	80021b4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f042 0201 	orr.w	r2, r2, #1
 80021a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021a2:	e007      	b.n	80021b4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 0201 	orr.w	r2, r2, #1
 80021b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40010000 	.word	0x40010000
 80021c8:	40000400 	.word	0x40000400
 80021cc:	40000800 	.word	0x40000800
 80021d0:	40000c00 	.word	0x40000c00
 80021d4:	40014000 	.word	0x40014000

080021d8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68da      	ldr	r2, [r3, #12]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0201 	bic.w	r2, r2, #1
 80021ee:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6a1a      	ldr	r2, [r3, #32]
 80021f6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80021fa:	4013      	ands	r3, r2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10f      	bne.n	8002220 <HAL_TIM_Base_Stop_IT+0x48>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6a1a      	ldr	r2, [r3, #32]
 8002206:	f240 4344 	movw	r3, #1092	@ 0x444
 800220a:	4013      	ands	r3, r2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d107      	bne.n	8002220 <HAL_TIM_Base_Stop_IT+0x48>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0201 	bic.w	r2, r2, #1
 800221e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b084      	sub	sp, #16
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d020      	beq.n	800229a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d01b      	beq.n	800229a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f06f 0202 	mvn.w	r2, #2
 800226a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 f999 	bl	80025b8 <HAL_TIM_IC_CaptureCallback>
 8002286:	e005      	b.n	8002294 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 f98b 	bl	80025a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f99c 	bl	80025cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d020      	beq.n	80022e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f003 0304 	and.w	r3, r3, #4
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d01b      	beq.n	80022e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f06f 0204 	mvn.w	r2, #4
 80022b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2202      	movs	r2, #2
 80022bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 f973 	bl	80025b8 <HAL_TIM_IC_CaptureCallback>
 80022d2:	e005      	b.n	80022e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 f965 	bl	80025a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f976 	bl	80025cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d020      	beq.n	8002332 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 0308 	and.w	r3, r3, #8
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d01b      	beq.n	8002332 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f06f 0208 	mvn.w	r2, #8
 8002302:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2204      	movs	r2, #4
 8002308:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f94d 	bl	80025b8 <HAL_TIM_IC_CaptureCallback>
 800231e:	e005      	b.n	800232c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 f93f 	bl	80025a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f950 	bl	80025cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	f003 0310 	and.w	r3, r3, #16
 8002338:	2b00      	cmp	r3, #0
 800233a:	d020      	beq.n	800237e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f003 0310 	and.w	r3, r3, #16
 8002342:	2b00      	cmp	r3, #0
 8002344:	d01b      	beq.n	800237e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f06f 0210 	mvn.w	r2, #16
 800234e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2208      	movs	r2, #8
 8002354:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 f927 	bl	80025b8 <HAL_TIM_IC_CaptureCallback>
 800236a:	e005      	b.n	8002378 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f919 	bl	80025a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f92a 	bl	80025cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00c      	beq.n	80023a2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	d007      	beq.n	80023a2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f06f 0201 	mvn.w	r2, #1
 800239a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f7fe fb41 	bl	8000a24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00c      	beq.n	80023c6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d007      	beq.n	80023c6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80023be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 fab5 	bl	8002930 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d00c      	beq.n	80023ea <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d007      	beq.n	80023ea <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80023e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 f8fb 	bl	80025e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	f003 0320 	and.w	r3, r3, #32
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00c      	beq.n	800240e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f003 0320 	and.w	r3, r3, #32
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d007      	beq.n	800240e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f06f 0220 	mvn.w	r2, #32
 8002406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 fa87 	bl	800291c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800240e:	bf00      	nop
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b084      	sub	sp, #16
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
 800241e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002420:	2300      	movs	r3, #0
 8002422:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800242a:	2b01      	cmp	r3, #1
 800242c:	d101      	bne.n	8002432 <HAL_TIM_ConfigClockSource+0x1c>
 800242e:	2302      	movs	r3, #2
 8002430:	e0b4      	b.n	800259c <HAL_TIM_ConfigClockSource+0x186>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2202      	movs	r2, #2
 800243e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002450:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002458:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800246a:	d03e      	beq.n	80024ea <HAL_TIM_ConfigClockSource+0xd4>
 800246c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002470:	f200 8087 	bhi.w	8002582 <HAL_TIM_ConfigClockSource+0x16c>
 8002474:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002478:	f000 8086 	beq.w	8002588 <HAL_TIM_ConfigClockSource+0x172>
 800247c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002480:	d87f      	bhi.n	8002582 <HAL_TIM_ConfigClockSource+0x16c>
 8002482:	2b70      	cmp	r3, #112	@ 0x70
 8002484:	d01a      	beq.n	80024bc <HAL_TIM_ConfigClockSource+0xa6>
 8002486:	2b70      	cmp	r3, #112	@ 0x70
 8002488:	d87b      	bhi.n	8002582 <HAL_TIM_ConfigClockSource+0x16c>
 800248a:	2b60      	cmp	r3, #96	@ 0x60
 800248c:	d050      	beq.n	8002530 <HAL_TIM_ConfigClockSource+0x11a>
 800248e:	2b60      	cmp	r3, #96	@ 0x60
 8002490:	d877      	bhi.n	8002582 <HAL_TIM_ConfigClockSource+0x16c>
 8002492:	2b50      	cmp	r3, #80	@ 0x50
 8002494:	d03c      	beq.n	8002510 <HAL_TIM_ConfigClockSource+0xfa>
 8002496:	2b50      	cmp	r3, #80	@ 0x50
 8002498:	d873      	bhi.n	8002582 <HAL_TIM_ConfigClockSource+0x16c>
 800249a:	2b40      	cmp	r3, #64	@ 0x40
 800249c:	d058      	beq.n	8002550 <HAL_TIM_ConfigClockSource+0x13a>
 800249e:	2b40      	cmp	r3, #64	@ 0x40
 80024a0:	d86f      	bhi.n	8002582 <HAL_TIM_ConfigClockSource+0x16c>
 80024a2:	2b30      	cmp	r3, #48	@ 0x30
 80024a4:	d064      	beq.n	8002570 <HAL_TIM_ConfigClockSource+0x15a>
 80024a6:	2b30      	cmp	r3, #48	@ 0x30
 80024a8:	d86b      	bhi.n	8002582 <HAL_TIM_ConfigClockSource+0x16c>
 80024aa:	2b20      	cmp	r3, #32
 80024ac:	d060      	beq.n	8002570 <HAL_TIM_ConfigClockSource+0x15a>
 80024ae:	2b20      	cmp	r3, #32
 80024b0:	d867      	bhi.n	8002582 <HAL_TIM_ConfigClockSource+0x16c>
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d05c      	beq.n	8002570 <HAL_TIM_ConfigClockSource+0x15a>
 80024b6:	2b10      	cmp	r3, #16
 80024b8:	d05a      	beq.n	8002570 <HAL_TIM_ConfigClockSource+0x15a>
 80024ba:	e062      	b.n	8002582 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024cc:	f000 f998 	bl	8002800 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80024de:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	609a      	str	r2, [r3, #8]
      break;
 80024e8:	e04f      	b.n	800258a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024fa:	f000 f981 	bl	8002800 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800250c:	609a      	str	r2, [r3, #8]
      break;
 800250e:	e03c      	b.n	800258a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800251c:	461a      	mov	r2, r3
 800251e:	f000 f8f5 	bl	800270c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2150      	movs	r1, #80	@ 0x50
 8002528:	4618      	mov	r0, r3
 800252a:	f000 f94e 	bl	80027ca <TIM_ITRx_SetConfig>
      break;
 800252e:	e02c      	b.n	800258a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800253c:	461a      	mov	r2, r3
 800253e:	f000 f914 	bl	800276a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2160      	movs	r1, #96	@ 0x60
 8002548:	4618      	mov	r0, r3
 800254a:	f000 f93e 	bl	80027ca <TIM_ITRx_SetConfig>
      break;
 800254e:	e01c      	b.n	800258a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800255c:	461a      	mov	r2, r3
 800255e:	f000 f8d5 	bl	800270c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2140      	movs	r1, #64	@ 0x40
 8002568:	4618      	mov	r0, r3
 800256a:	f000 f92e 	bl	80027ca <TIM_ITRx_SetConfig>
      break;
 800256e:	e00c      	b.n	800258a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4619      	mov	r1, r3
 800257a:	4610      	mov	r0, r2
 800257c:	f000 f925 	bl	80027ca <TIM_ITRx_SetConfig>
      break;
 8002580:	e003      	b.n	800258a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	73fb      	strb	r3, [r7, #15]
      break;
 8002586:	e000      	b.n	800258a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002588:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800259a:	7bfb      	ldrb	r3, [r7, #15]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a3a      	ldr	r2, [pc, #232]	@ (80026f0 <TIM_Base_SetConfig+0xfc>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d00f      	beq.n	800262c <TIM_Base_SetConfig+0x38>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002612:	d00b      	beq.n	800262c <TIM_Base_SetConfig+0x38>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a37      	ldr	r2, [pc, #220]	@ (80026f4 <TIM_Base_SetConfig+0x100>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d007      	beq.n	800262c <TIM_Base_SetConfig+0x38>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a36      	ldr	r2, [pc, #216]	@ (80026f8 <TIM_Base_SetConfig+0x104>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d003      	beq.n	800262c <TIM_Base_SetConfig+0x38>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a35      	ldr	r2, [pc, #212]	@ (80026fc <TIM_Base_SetConfig+0x108>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d108      	bne.n	800263e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002632:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	4313      	orrs	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a2b      	ldr	r2, [pc, #172]	@ (80026f0 <TIM_Base_SetConfig+0xfc>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d01b      	beq.n	800267e <TIM_Base_SetConfig+0x8a>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800264c:	d017      	beq.n	800267e <TIM_Base_SetConfig+0x8a>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a28      	ldr	r2, [pc, #160]	@ (80026f4 <TIM_Base_SetConfig+0x100>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d013      	beq.n	800267e <TIM_Base_SetConfig+0x8a>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a27      	ldr	r2, [pc, #156]	@ (80026f8 <TIM_Base_SetConfig+0x104>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d00f      	beq.n	800267e <TIM_Base_SetConfig+0x8a>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a26      	ldr	r2, [pc, #152]	@ (80026fc <TIM_Base_SetConfig+0x108>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d00b      	beq.n	800267e <TIM_Base_SetConfig+0x8a>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a25      	ldr	r2, [pc, #148]	@ (8002700 <TIM_Base_SetConfig+0x10c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d007      	beq.n	800267e <TIM_Base_SetConfig+0x8a>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a24      	ldr	r2, [pc, #144]	@ (8002704 <TIM_Base_SetConfig+0x110>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d003      	beq.n	800267e <TIM_Base_SetConfig+0x8a>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a23      	ldr	r2, [pc, #140]	@ (8002708 <TIM_Base_SetConfig+0x114>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d108      	bne.n	8002690 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	4313      	orrs	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	4313      	orrs	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a0e      	ldr	r2, [pc, #56]	@ (80026f0 <TIM_Base_SetConfig+0xfc>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d103      	bne.n	80026c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	691a      	ldr	r2, [r3, #16]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d105      	bne.n	80026e2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	f023 0201 	bic.w	r2, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	611a      	str	r2, [r3, #16]
  }
}
 80026e2:	bf00      	nop
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40010000 	.word	0x40010000
 80026f4:	40000400 	.word	0x40000400
 80026f8:	40000800 	.word	0x40000800
 80026fc:	40000c00 	.word	0x40000c00
 8002700:	40014000 	.word	0x40014000
 8002704:	40014400 	.word	0x40014400
 8002708:	40014800 	.word	0x40014800

0800270c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800270c:	b480      	push	{r7}
 800270e:	b087      	sub	sp, #28
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	f023 0201 	bic.w	r2, r3, #1
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002736:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	4313      	orrs	r3, r2
 8002740:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f023 030a 	bic.w	r3, r3, #10
 8002748:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	4313      	orrs	r3, r2
 8002750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	621a      	str	r2, [r3, #32]
}
 800275e:	bf00      	nop
 8002760:	371c      	adds	r7, #28
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800276a:	b480      	push	{r7}
 800276c:	b087      	sub	sp, #28
 800276e:	af00      	add	r7, sp, #0
 8002770:	60f8      	str	r0, [r7, #12]
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	f023 0210 	bic.w	r2, r3, #16
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002794:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	031b      	lsls	r3, r3, #12
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80027a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	011b      	lsls	r3, r3, #4
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	621a      	str	r2, [r3, #32]
}
 80027be:	bf00      	nop
 80027c0:	371c      	adds	r7, #28
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b085      	sub	sp, #20
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	f043 0307 	orr.w	r3, r3, #7
 80027ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	609a      	str	r2, [r3, #8]
}
 80027f4:	bf00      	nop
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002800:	b480      	push	{r7}
 8002802:	b087      	sub	sp, #28
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
 800280c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800281a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	021a      	lsls	r2, r3, #8
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	431a      	orrs	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	4313      	orrs	r3, r2
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	4313      	orrs	r3, r2
 800282c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	609a      	str	r2, [r3, #8]
}
 8002834:	bf00      	nop
 8002836:	371c      	adds	r7, #28
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002854:	2302      	movs	r3, #2
 8002856:	e050      	b.n	80028fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800287e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	4313      	orrs	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a1c      	ldr	r2, [pc, #112]	@ (8002908 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d018      	beq.n	80028ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028a4:	d013      	beq.n	80028ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a18      	ldr	r2, [pc, #96]	@ (800290c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d00e      	beq.n	80028ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a16      	ldr	r2, [pc, #88]	@ (8002910 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d009      	beq.n	80028ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a15      	ldr	r2, [pc, #84]	@ (8002914 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d004      	beq.n	80028ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a13      	ldr	r2, [pc, #76]	@ (8002918 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d10c      	bne.n	80028e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	4313      	orrs	r3, r2
 80028de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68ba      	ldr	r2, [r7, #8]
 80028e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	40010000 	.word	0x40010000
 800290c:	40000400 	.word	0x40000400
 8002910:	40000800 	.word	0x40000800
 8002914:	40000c00 	.word	0x40000c00
 8002918:	40014000 	.word	0x40014000

0800291c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <memset>:
 8002944:	4402      	add	r2, r0
 8002946:	4603      	mov	r3, r0
 8002948:	4293      	cmp	r3, r2
 800294a:	d100      	bne.n	800294e <memset+0xa>
 800294c:	4770      	bx	lr
 800294e:	f803 1b01 	strb.w	r1, [r3], #1
 8002952:	e7f9      	b.n	8002948 <memset+0x4>

08002954 <__libc_init_array>:
 8002954:	b570      	push	{r4, r5, r6, lr}
 8002956:	4d0d      	ldr	r5, [pc, #52]	@ (800298c <__libc_init_array+0x38>)
 8002958:	4c0d      	ldr	r4, [pc, #52]	@ (8002990 <__libc_init_array+0x3c>)
 800295a:	1b64      	subs	r4, r4, r5
 800295c:	10a4      	asrs	r4, r4, #2
 800295e:	2600      	movs	r6, #0
 8002960:	42a6      	cmp	r6, r4
 8002962:	d109      	bne.n	8002978 <__libc_init_array+0x24>
 8002964:	4d0b      	ldr	r5, [pc, #44]	@ (8002994 <__libc_init_array+0x40>)
 8002966:	4c0c      	ldr	r4, [pc, #48]	@ (8002998 <__libc_init_array+0x44>)
 8002968:	f000 f818 	bl	800299c <_init>
 800296c:	1b64      	subs	r4, r4, r5
 800296e:	10a4      	asrs	r4, r4, #2
 8002970:	2600      	movs	r6, #0
 8002972:	42a6      	cmp	r6, r4
 8002974:	d105      	bne.n	8002982 <__libc_init_array+0x2e>
 8002976:	bd70      	pop	{r4, r5, r6, pc}
 8002978:	f855 3b04 	ldr.w	r3, [r5], #4
 800297c:	4798      	blx	r3
 800297e:	3601      	adds	r6, #1
 8002980:	e7ee      	b.n	8002960 <__libc_init_array+0xc>
 8002982:	f855 3b04 	ldr.w	r3, [r5], #4
 8002986:	4798      	blx	r3
 8002988:	3601      	adds	r6, #1
 800298a:	e7f2      	b.n	8002972 <__libc_init_array+0x1e>
 800298c:	080029e0 	.word	0x080029e0
 8002990:	080029e0 	.word	0x080029e0
 8002994:	080029e0 	.word	0x080029e0
 8002998:	080029e4 	.word	0x080029e4

0800299c <_init>:
 800299c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800299e:	bf00      	nop
 80029a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029a2:	bc08      	pop	{r3}
 80029a4:	469e      	mov	lr, r3
 80029a6:	4770      	bx	lr

080029a8 <_fini>:
 80029a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029aa:	bf00      	nop
 80029ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ae:	bc08      	pop	{r3}
 80029b0:	469e      	mov	lr, r3
 80029b2:	4770      	bx	lr
